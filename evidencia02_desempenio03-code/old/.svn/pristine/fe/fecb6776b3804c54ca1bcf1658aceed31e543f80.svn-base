<?php

 class Nonbillable_visitlog extends MY_Controller {
 	
 	function Nonbillable_visitlog () {
 		
		parent::MY_Controller();
		$this->tpl->assign("resource_path", "useragency/nonbillable_visitlog");
		
		$this->tpl->assign('tab_page', true);
		$this->tpl->assign('noedit', true);
		$this->tpl->assign('no_grid_buttons', true);
 		
 	}
 	
 	function index () {
	
		//echo CI_VERSION;
 		$agency_id = $this->getAgencyId();
		// LOAD MODELS
		$this->load->model('visitlog/task/mparams');
		
		// added by ksa to read a session set in the grid function, and used the session values to fill in the filter form
		$nonbillable_form_data = $this->session->userdata('nonbillable_form_data');
		
		$agency_id = isset($nonbillable_form_data['agency_id'])?$nonbillable_form_data['agency_id']:'';
		$keyword = isset($nonbillable_form_data['keyword'])?$nonbillable_form_data['keyword']:'';
		$visit_type = isset($nonbillable_form_data['visit_type'])?$nonbillable_form_data['visit_type']:array(200, 400, 350, 101, 104);
		$visit_status = isset($nonbillable_form_data['visit_status'])?$nonbillable_form_data['visit_status']:'';
		$date_from = isset($nonbillable_form_data['date_from'])?$nonbillable_form_data['date_from']:date('m-d-Y', strtotime('-90 days'));
		$date_to = isset($nonbillable_form_data['date_to'])?$nonbillable_form_data['date_to']:'';
		$exclude_send_date = isset($nonbillable_form_data['exclude_send_date'])?$nonbillable_form_data['exclude_send_date']:1;
		$this->tpl->assign("agency_id", $agency_id);
		$this->tpl->assign("keyword", $keyword);
		$this->tpl->assign("visit_type", $visit_type);
		$this->tpl->assign("visit_status", $visit_status);
		$this->tpl->assign("date_from", $date_from);
		$this->tpl->assign("date_to", $date_to);
		$this->tpl->assign("exclude_send_date", $exclude_send_date);
		
		//echo "<pre>"; print_r($nonbillable_form_data); echo "</pre>";
    	$this->tpl->assign(array("no_grid_buttons" => true));
		
		$this->tpl->assign('additional_buttons', array(
			'Print Docs' => 'print_docs()', 
			'Email Docs'=>'email_docs_confirm()', 
		));

 		
 		//$this->tpl->assign_include("script_tpl", "useragency/nonbillable_visitlog/script");
 		$this->tpl->assign('tab_013_status', 1);
 		//$this->tpl->assign('afterload_func', 'grid_loaded()');
		
		if ($this->getAgencyType() == 'C') {
			$agency_list = array();
			foreach ($this->agencycontractormdl->getByContractor($this->getAgencyId()) as $value) {
				$agency_list[$value->agency_id] = $value->agency_name;
			 } 

			$this->tpl->assign("agency_list", $agency_list);								
		}
		
		$visit_type_list = $this->mparams->get_visit_type_list2(true);
		
		$this->tpl->assign("visit_type_list",  $visit_type_list);
		$this->tpl->assign("date_from",  $date_from);
		$this->tpl->assign("visit_status_list" , $this->mparams->get_visit_status_list( false ) );
		
 		
 		// if (!is_null($agency_id)) $this->tpl->assign("entity_id", $agency_id);
 		$this->tpl->assign_include("filter_tpl", "useragency/nonbillable_visitlog/gfilter");
		//$this->tpl->assign_include("dynamic_tpl", "parts/gbase");
		$this->tpl->assign_include("dynamic_tpl", "useragency/nonbillable_visitlog/gbase");
		$this->tpl->view("parts/ibase", $this->lang->language);
 		
 	}
 	
 	function grid () {
 		$assesment_types_list = $this->parametermdl->getByType(32);

 		$agency_id = $this->getAgencyId(); 		
		// LOAD MODELS
		
		
		$this->load->model('visitlog/task/mparams');
		
		// added by ksa to set a session for the posted value from the nonbilable filter form
		$nonbillable_form_data = $_POST;
    	$this->session->set_userdata('nonbillable_form_data', $nonbillable_form_data);
		
		
		$this->xml->root_name = "rows";
		$document = $this->xml->Document();
		
		$head = $this->xml->Element("head");
		$head->append($this->xml->Element("column", "width=2;type=ch", " "));
		$head->append($this->xml->Element("column", "width=8", "Date"));
		$head->append($this->xml->Element("column", "width=*",  "Visit/Task Name"));
		$head->append($this->xml->Element("column", "width=8",  "Send Date"));
		$head->append($this->xml->Element("column", "width=3",  "R"));
		$head->append($this->xml->Element("column", "width=3",  "U"));
		$head->append($this->xml->Element("column", "width=10",  "Status"));
		$head->append($this->xml->Element("column", "width=15", "Patient Name"));
		$head->append($this->xml->Element("column", "width=15", "Therapist Name"));
		$head->append($this->xml->Element("column", "width=10", "Case Manager"));
		$head->append($this->xml->Element("column", "width=*", "Agency Name"));
		$head->append($this->xml->Element("settings", null, $this->xml->Element("colwidth", null, "%")));
		$document->append($head);
		$visit_type_list = $this->mparams->get_visit_type_list2(true);
		// foreach($this->visitlogmdl->report_001((is_null($agency_id) ? $this->getAgencyId()  : $agency_id), $this->getAgencyType()) as $task) 
		$tasks = $this->visitlogmdl->nonbilable($agency_id, 'C', $visit_type_list);
		//echo "<pre>"; print_r($tasks); echo "</pre>"; exit;
		
		$this->load->helper('general');
		foreach($tasks as $task) {
			$visit_task_name = "";
			if ($task->visit_log_number) {
				if($task->visit_program=='ptev'){
					$this->load->model('ptevmdl');
					$ptev = $this->ptevmdl->get($task->visit_log_id);
					if(isset($assesment_types_list[@$ptev->tab_32_assess_type])){
						$visit_task_name = "(" . $task->visit_log_number . ") " . $task->visit_description.' - '.$assesment_types_list[@$ptev->tab_32_assess_type];
					}else{
						$visit_task_name = "(" . $task->visit_log_number . ") " . $task->visit_description;
					}
				}else{
					$visit_task_name = "(" . $task->visit_log_number . ") " . $task->visit_description;	
				}
			} else {
				if($task->visit_program=='ptev'){
					$this->load->model('ptevmdl');
					$ptev = $this->ptevmdl->get($task->visit_log_id);
					if(isset($assesment_types_list[@$ptev->tab_32_assess_type])){
						$visit_task_name = $task->visit_description.' - '.$assesment_types_list[@$ptev->tab_32_assess_type];
					}else{
						$visit_task_name = $task->visit_description;					
					}
				}else{
					$visit_task_name = $task->visit_description;
				}          
			}

			$cell = $this->xml->Element("row", "id=" . $task->visit_log_id);
			$cell->append($this->xml->Element("cell", null, "0"));
			$cell->append($this->xml->Element("cell", null, standard_date(mysql_to_unix($task->visit_date_time, 'USA_DATE'))));
			
			/*if($task->visit_type_id == 104) {
                $month = date("m",strtotime($task->visit_date_time));
                $type_quar_rpt = "";
                switch ($month) {
                    case "01":
                    case "02":
                    case "03":
                        $type_quar_rpt = "Q1";
                        break;
                    case "04":
                    case "05":
                    case "06":
                        $type_quar_rpt = "Q2";
                        break;
                    case "07":
                    case "08":
                    case "09":
                        $type_quar_rpt = "Q3";
                        break;
                    case "10":
                    case "11":
                    case "12":
                        $type_quar_rpt = "Q4";
                        break;
                    default:
                        break;
                }
                $cell->append($this->xml->Element("cell", null, $visit_task_name." ".$type_quar_rpt));
            } else {
                $cell->append($this->xml->Element("cell", null, $visit_task_name));
            }*/
			
			$qstr = calculate_q_text($task);
            $cell->append($this->xml->Element("cell", null, $visit_task_name . $qstr));
			
			
			
			if($task->sent_email_log_count > 0) {
				$show_email_str = '<![CDATA[';
				$show_email_str.= '<a title="Recipients" href="javascript://" onclick="show_emails(' . $task->visit_log_id . ')"> R </a>';
				$show_email_str .= ']]>';
			} else { 
				$show_email_str = '';
			}
			
			if (is_null($task->sent_to_agency_date) OR $task->sent_to_agency_date == '0000-00-00 00:00:00') {
				$cell->append($this->xml->Element("cell", null, null));
			} else {
				$cell->append($this->xml->Element("cell", null, standard_date(mysql_to_unix($task->sent_to_agency_date), 'USA_DATE')));	
			}
			

			$cell->append($this->xml->Element("cell", null, $show_email_str));
			
			// Scanned copy icon
			$visit_type = $this->visittypemdl->getById($task->visit_type_id);
			$visit_program_info = array();
			if ($visit_type->visit_program != "") {
				if(file_exists(APPPATH."models/".strtolower($visit_type->visit_program)."mdl.php")){
					$modelclass = strtolower($visit_type->visit_program).'mdl';
					$this->load->model($modelclass);
					$visit_program_info = $this->$modelclass->get($task->visit_log_id);
				}
			}

			$commentsCellStr = '<![CDATA[';
			if ( (isset($visit_program_info->upload_document_name) AND $visit_program_info->upload_document_name != '')
				OR (isset($visit_program_info->upload_document_name2) AND $visit_program_info->upload_document_name2 != '')
			) {
				$scanned_copy = "<span title='Uploaded Document' style='color: red; background: yellow; '>&nbsp;&nbsp;U&nbsp;&nbsp;</span>";
				$commentsCellStr.= '<a title="Uploaded Document" href="javascript://" onclick="(isIE()?event:arguments[0]).cancelBubble = true;  Tip(\'Scanned Copy\', OFFSETY, 18);"> '.$scanned_copy.' </a>';
			}

			if ( isset($visit_program_info->upload_covid_document) AND $visit_program_info->upload_covid_document != ''
			) {
				$scanned_copy = "&nbsp;<span title='Covid-19 pdf attachment' style='color: red; background: yellow; '>&nbsp;&nbsp;C&nbsp;&nbsp;</span>";
				$commentsCellStr.= '<a title="Scanned Copy" href="javascript://" onclick="(isIE()?event:arguments[0]).cancelBubble = true;  Tip(\'Covid-19 pdf attachment\', OFFSETY, 18);"> '.$scanned_copy.' </a>';
			}
			
			$commentsCellStr .= ']]>';  			
			$cell->append($this->xml->Element("cell", null, $commentsCellStr));

			$cell->append($this->xml->Element("cell", null, $task->tab_description));
			$cell->append($this->xml->Element("cell", null, $task->first_name . " " . $task->last_name));
			
				
			
			//$clinician = $this->mparams->get_name_user($task->user_id);
			$cell->append($this->xml->Element("cell", null, $task->clinician_first_name . " " . $task->clinician_last_name));
			
			$case_manager = $this->usagymdl->getByUsAgyId($task->case_manager_user_id);
			$cell->append($this->xml->Element("cell", null, @$case_manager->first_name . " " . @$case_manager->last_name));
	        
	        // Agency name column
	        $cell->append($this->xml->Element("cell", null, $task->agency_name));
      		
			$document->append($cell);
			
		}
 		
 	}
	
	
	function email_docs($record_ids = null){
		
		if (is_null($record_ids)) {
			exit('At least one Task/Visit must be selected');
		}

		// $record_ids = $this->input->post('record_ids');
		$records = explode(",", $record_ids);
		$agencies = array();

		$visits = array();
		$patient_agency_id = null;
		foreach ($records as $visit_log_id) {			
			$visit_log = $this->visitlogmdl->getById($visit_log_id);
			$patient = $this->patientmdl->getById($visit_log->patient_id);
			// $visit_type = $this->visittypemdl->getById($visit_log->visit_type_id);
			$agencies[$patient->agency_id] = $patient->agency_id;
			$patient_agency_id = $patient->agency_id;
			$visits[] = $visit_log; 
		}
		
		if(count($agencies) > 1) {
			exit("Error: Records selected must have same agency");
		}

		$this->tpl->assign("record_ids", $record_ids);

		$rules = array (
          'submit' 	=> 'required|callback_validate_email_duplicate'
        );
	    $fields = array(
	        'submit' => 'Send Email'
	    );

		

	    $this->validation->set_rules($rules);
		$this->validation->set_fields($fields);

		// $patient = $this->patientmdl->getById($patient_id);

		if ($this->validation->run() == FALSE) {
			$email_to = "";
			$agency_info = $this->agencymdl->getByAgencyId($patient_agency_id);      
			$email_to = $agency_info->agency_email;
			
            $agency_info = $this->agencymdl->getByAgencyId($patient_agency_id);
			
            $this->tpl->assign("entity_id", $agency_info->agency_id);
			$this->tpl->assign("email_to", $email_to);
            $this->tpl->assign("paginate", 0);
      		$this->tpl->assign("send_date", date('Y-m-d'));
            $this->tpl->assign("resource_grid", "contractor_contacts_grid");
            $this->load->model('agencymdl');
            $company_info = $this->agencymdl->getByAgencyId($this->getAgencyId());
			
			$agency_contract_detail = $this->agencycontractormdl->getAgencyContractorById($this->getAgencyId(), $patient_agency_id);
			$this->tpl->assign("agency_contract_detail", $agency_contract_detail);
			
			
            $this->tpl->assign("company_email", $company_info->agency_email);
	      	$this->tpl->assign_include("dynamic_tpl", "useragency/nonbillable_visitlog/email_docs");
			$this->tpl->view("parts/ibase", $this->lang->language);
	    }else{
	    	$to_emails = array();
	    	$company = $this->agencymdl->getByAgencyId($this->getAgencyId());

	    	if ($this->input->post('email_agency') ==  1) {
				$email_str = $this->input->post('email');
				$email_str_array = explode(",", $email_str);
				if(!empty($email_str_array)) {
					foreach($email_str_array as $k => $v) {
						$to_emails[] = trim($v);
					}
				}
			}
			
			if ($this->input->post('email_copy_company') == 1) {
            	$to_emails[] = $company->agency_email;
            }

	    	// Send to contractor contacts which are selected
	    	$this->load->model("contractorcontactsmdl");	

            if ($this->input->post('contact_ids') != "") {
            	$contact_ids = explode(",", $this->input->post('contact_ids'));
				
				$contacts = $this->contractorcontactsmdl->getByIds($contact_ids);
				foreach ($contacts as $contact) {
					$to_emails[] = $contact->email;
				}
            }

			if (empty($to_emails)) {
				exit("You didn't select any email recipient.");
			}
			
			//$to = array_pop($to_emails);

	    	$recods = explode(",", $record_ids);
	    	global $GL_VISIT;

	    	$filenames = array();
	    	
	    	global $UPLOADED_VISITS;
	    	$UPLOADED_VISITS = array();

			$this->load->helper('visit_pdf');
			foreach ($visits as $visit_log) {
				$visit_log_id = $visit_log->visit_log_id;
				// $visit_log = $this->visitlogmdl->getById($visit_log_id);
				$visit_type = $this->visittypemdl->getById($visit_log->visit_type_id);
				
				switch ($visit_log->visit_type_id) {
					case 350:
						if(!isset($filenames[$visit_log_id])){
							$comm_note = $this->messagemdl->getByVisitId($visit_log_id);
							if (!empty($comm_note)) {
								$filenames[$visit_log_id] = comm_note_pdf($comm_note->msg_id);
								//$send_date = $this->input->post('send_date'); // removed it
								$send_date = date('Y-m-d');
								$sent_date = standard_date(human_to_unix($send_date), 'MYSQL_NOTIME');
								$this->visitlogmdl->updateSentTo($visit_log_id, $sent_date);
							}
						}
						break;
					
					default:
						if ($visit_type->visit_program == null) {
							continue;
						}
						$method = $visit_type->visit_program.'_pdf';
						
						if(!function_exists($method)){          
							continue;
						}

						$sent_date = standard_date(human_to_unix($this->input->post('send_date')), 'MYSQL_NOTIME');
						$this->visitlogmdl->updateSentTo($visit_log_id, $sent_date);
						
						$this->load->model($visit_type->visit_program.'mdl');
						
						if(!isset($filenames[$visit_log_id])){
							$visit_pdf = $method($visit_log_id);
							if ( (isset($GL_VISIT->upload_document_name) AND $GL_VISIT->upload_document_name != "") 
								OR  (isset($GL_VISIT->upload_document_name2) AND $GL_VISIT->upload_document_name2 != "") ) {
								// when uploaded found document no need to print electronic version
				        	}else{
								$filenames[] = $visit_pdf;
				        	}
						}


						// Add uploaded scanned document if have any
			            $FCPATH = FCPATH;
			            $FCPATH = str_replace("\\","/", $FCPATH);
			            // upload_document_name 1
			            if (isset($GL_VISIT->upload_document_name) AND $GL_VISIT->upload_document_name != "") {
			              if (file_exists($FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name)) {
			                $ext = pathinfo($FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name, PATHINFO_EXTENSION);
			                if ($ext == 'pdf') {
			                  // $filenames[] = $FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name;
			                  $UPLOADED_VISITS[] = $FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name;
			                }
			              }
			            }
			            
			            // upload_document_name 2
			            if (isset($GL_VISIT->upload_document_name2) AND $GL_VISIT->upload_document_name2 != "") {
			              if (file_exists($FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name2)) {
			                $ext = pathinfo($FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name2, PATHINFO_EXTENSION);
			                if ($ext == 'pdf') {
			                  // $filenames[] = $FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name2;
			                  $UPLOADED_VISITS[] = $FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name2;
			                }
			              }
			            }
						break;
				}
			}

			if (empty($filenames)) {
				exit("No notes are printable from your selected records.");
			}

			$contractor_info = $this->usermdl->getById($this->session->userdata('user_id'));    
			// $patient = $this->patientmdl->getById($patient_id);

			$this->load->library('email');
			$this->email->from('noreply@homehealthsoft.com', $company->agency_name);

			
			$this->email->to($to_emails);
			
			$body = "** This is a no-reply email ** - Please respond through the HHS application internal email system if necessary\n\n".$this->input->post('special_notes');
			// $this->email->set_mailtype("html"); 
			$this->email->message($body);      
			$subject = "Documents from ".$company->agency_name." - ".$contractor_info->first_name." ".$contractor_info->last_name;

			if ($this->input->post('send_in_bulks') == 1) {
	        	/** 
				 * New Code support >= PHP 5.3.0
				 */
				require_once(APPPATH.'third_party/itbz/fpdf/FPDF.php');          
				require_once(APPPATH.'third_party/itbz/fpdi/FPDI.php');          
				require_once(APPPATH.'third_party/Jurosh/PDFMerge/PDFMerger.php');      
	            //  When 'send_in_bulks' is ON, Email all Electronic visits selected in one PDF
	            // Merge Electronic visits only and attach this single merged file
	            $pdf = new \Jurosh\PDFMerge\PDFMerger;

	            try {
		            foreach($filenames as $name){
		              $pdf->addPDF($name, 'all');
		            }      

		            $filepath = FCPATH;
		            $filepath = str_replace("\\","/", $filepath);
		            $filepath = $filepath."tmp/Documents_".time().".pdf";
		            $pdf->merge('file', $filepath);
		            $this->email->attach($filepath);
		            $filenames[] = $filepath;
	            } catch (Exception $e) {
					echo "<font color='red'>Visit Pdfs can't merged into single pdf.</font>";
					foreach($filenames as $note){
						if (strpos($note, 'datastore') == FALSE) {
							@unlink($note);
						}
					}
					exit();            	
	            }
	            
	            
          	} else {
	            foreach($filenames as $note){            
					$this->email->attach($note);
				}
          	}

          	// Attach $UPLOADED_VISITS if have any
          	foreach($UPLOADED_VISITS as $note){            
              $this->email->attach($note);
            }

            unset($UPLOADED_VISITS);
			
			$this->email->subject($subject);
			$this->email->send();
			// echo $this->email->print_debugger();
			$this->email->clear(true);
				
			// save data to the sent_email_instances and sent_email_instance_details tables
			$this->load->model('sentemailinstancemdl');
			$this->sentemailinstancemdl->insert();
			$instance_id = $this->sentemailinstancemdl->id;
			
			$this->load->model('sentemailinstancedetailmdl');
			$insert_array = array();
			foreach($records as $vi => $vk) {
				foreach($to_emails as $ei => $ek) {
					 $insert_array[] = array('sent_email_instance_id' => $instance_id, 'source_id' => $vk, 'email' => $ek, 'source_name' => 'NONB');
				}		
			}
			if(!empty($insert_array)) {
				$this->sentemailinstancedetailmdl->insert_batch($insert_array);
			}
			
			
			foreach($filenames as $note){
				if (strpos($note, 'datastore') == FALSE) {
					@unlink($note);
				}
			}
			unset($filenames);
			echo "Email has been sent";
	    }
	}

	
	
	function show_emails($source_id = null) {
		
		if (is_null($source_id)) {
			exit('No record found in the request');
		}
		$this->load->model('sentemailinstancedetailmdl');
		$sent_emails_array = $this->sentemailinstancedetailmdl->get_group_emails_by_sent_date($source_id);
		//echo "<pre>"; print_r($sent_emails_array); echo "</pre>";
		$this->tpl->assign('sent_emails_array', $sent_emails_array);
		
		$this->tpl->assign_include("dynamic_tpl", "useragency/nonbillable_visitlog/show_emails");
		$this->tpl->view("parts/ibase", $this->lang->language);
	}
	
	
	function print_docs(){
		
		if (!is_null($this->input->post('record_ids'))) {
			$record_ids = $this->input->post('record_ids');
			$records = explode(",", $record_ids);
			$agencies = array();

			$visits = array();

			foreach ($records as $visit_log_id) {			
				$visit_log = $this->visitlogmdl->getById($visit_log_id);
				$patient = $this->patientmdl->getById($visit_log->patient_id);
				// $visit_type = $this->visittypemdl->getById($visit_log->visit_type_id);
				$agencies[$patient->agency_id] = $patient->agency_id;
				$visits[] = $visit_log; 
			}
			
			if(count($agencies) > 1) {
				exit("Error: Records selected must have same agency");
			}

			$print_elec_notes = 1;
			$print_uploaded_docs = 1;

			global $pt_3625_visits;
		    global $last_3625_visit_log_id;
		    global $print_notes;
		    global $GL_VISIT;
		    
		    global $ELEC_VISITS;
		    global $UPLOADED_VISITS;
		    global $F3625_VISITS;
		    global $VISITS_TO_UNLINK;

		    $ELEC_VISITS = array();
		    $UPLOADED_VISITS = array();
		    $F3625_VISITS = array();
		    $VISITS_TO_UNLINK = array();		    
		    $print_notes = 1;

			$filenames = array();
			$this->load->helper('visit_pdf');

			foreach ($visits as $visit_log) {
				switch ($visit_log->visit_type_id) {
					case 350:
						$visit_log_id = $visit_log->visit_log_id;
						$comm_note = $this->messagemdl->getByVisitId($visit_log_id);
						if (!empty($comm_note)) {
							$visit_pdf = comm_note_pdf($comm_note->msg_id);
							$filenames[] = $visit_pdf;
							$VISITS_TO_UNLINK[] = $visit_pdf;
							$ELEC_VISITS[] = $visit_pdf;
						}
					
						break;
					
					default:
						$visit_log_id = $visit_log->visit_log_id;
						$visit_type = $this->visittypemdl->getById($visit_log->visit_type_id);
						// echo 'visit_log_id = '.$visit_log_id.'<br>visit_program ='.$visit_type->visit_program.'<br> ';
						if ($visit_type->visit_program == null) {
							// echo '<hr>';
							continue;
						}
						$method = $visit_type->visit_program.'_pdf';
						
						// echo $method.'<br>';
						if(!function_exists($method)){          
							// echo 'method not exist<hr>';
							continue;
						} else {
							// echo '<hr>';
						}
			
						$this->load->model(strtolower($visit_type->visit_program).'mdl');
				      	$visit_pdf = $method($visit_log_id);
				      	$VISITS_TO_UNLINK[] = $visit_pdf;
				      	if ($visit_pdf) {
					        if ($print_elec_notes) {
					        	if ( (isset($GL_VISIT->upload_document_name) AND $GL_VISIT->upload_document_name != "") OR  (isset($GL_VISIT->upload_document_name2) AND $GL_VISIT->upload_document_name2 != "") ) {
					        	} else {
					            	$filenames[] = $visit_pdf;
					        	}
					            $ELEC_VISITS[] = $visit_pdf;
					        }
				     	}

				     	if ($print_uploaded_docs) {
				            // Add uploaded scanned document if have any
				            $FCPATH = FCPATH;
				            $FCPATH = str_replace("\\","/", $FCPATH);
				            // upload_document_name 1
				            if (isset($GL_VISIT->upload_document_name) AND $GL_VISIT->upload_document_name != "") {
				              	if (file_exists($FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name)) {
				                	$ext = pathinfo($FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name, PATHINFO_EXTENSION);
					                if ($ext == 'pdf') {
					                  	// $filenames[] = $FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name;
					                  	$UPLOADED_VISITS[] = $FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name;
					                }
				              	}
				            }
				            
				            // upload_document_name 2
				            if (isset($GL_VISIT->upload_document_name2) AND $GL_VISIT->upload_document_name2 != "") {
				              	if (file_exists($FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name2)) {
				                	$ext = pathinfo($FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name2, PATHINFO_EXTENSION);
					                if ($ext == 'pdf') {
					                  	// $filenames[] = $FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name2;
					                  	$UPLOADED_VISITS[] = $FCPATH.'/datastore/'.strtolower($visit_type->visit_program).'/'.$GL_VISIT->upload_document_name2;
					                }
				              	}
				            }
				      	}
						break;
				}
				
			}
			
			unset($pt_3625_visits);
		    unset($last_3625_visit_log_id);
		    unset($print_notes);
		    unset($GL_VISIT);

		    if (empty($filenames)) {
				exit("No notes are printable from your selected records.");
			}

			// print_r($filenames); exit();
			$pdf_name = "Documents";

			
			/** 
			* New Code support >= PHP 5.3.0
			*/
			require_once(APPPATH.'third_party/itbz/fpdf/FPDF.php');          
			require_once(APPPATH.'third_party/itbz/fpdi/FPDI.php');          
			require_once(APPPATH.'third_party/Jurosh/PDFMerge/PDFMerger.php');          
			// and we can do stuff
			$pdf = new \Jurosh\PDFMerge\PDFMerger;

			try {
				$electronic_file_name = null;

				if (count($filenames) > 0) {
		          	foreach($filenames as $name){
		            	$pdf->addPDF($name, 'all');
		          	}

		          	if (count($UPLOADED_VISITS) > 0) {
		            	// $electronic_file_name = sys_get_temp_dir().'/'.$pdf_name.'.pdf';
		            	$electronic_file_name = FCPATH.'tmp/'.$pdf_name.'.pdf';
		            	$pdf->merge('file', $electronic_file_name);
		          	}  else {
		            	$pdf->merge('download', $pdf_name.'.pdf');
		          	}   
		        }

				// End of code for PHP >= 5.3.0
				foreach($VISITS_TO_UNLINK as $name){
					if (strpos($name, 'datastore') == FALSE) {
					  @unlink($name);
					}
				}

				if (count($UPLOADED_VISITS) > 0) {
					$zip = new ZipArchive;
					$archive_file_name = $pdf_name.'.zip';

		          	// $zip_file = sys_get_temp_dir().'/'.$archive_file_name;
					$zip_file = FCPATH.'tmp/'.$archive_file_name;

					if (file_exists($zip_file)) {
						@unlink($zip_file);
					}


					if ($zip->open($zip_file, (ZipArchive::CREATE | ZipArchive::OVERWRITE)) === TRUE)
					{
						if ($electronic_file_name != "") {
		              		// Add electronic merged file to the zip
							$zip->addFile($electronic_file_name, basename($electronic_file_name));
						}

						foreach($UPLOADED_VISITS as $name){
							$name = str_replace("//", "/", $name);
		              		// echo $name."<br>";
		              		// Add files to the zip file inside demo_folder
							$zip->addFile($name, 'uploaded_documents/'.basename($name));
						}

		            	// All files are added, so close the zip file.
						$zip->close();

						header("Pragma: public");
						header("Expires: 0");
						header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
						header("Cache-Control: private",false);
						header("Content-Type: application/zip");
						header("Content-Disposition: attachment; filename=$archive_file_name");
						header("Content-Transfer-Encoding: binary");
						header("Content-length: " . filesize($zip_file));

						readfile("$zip_file");

						@unlink($electronic_file_name);
						@unlink($zip_file);
					} else {
						exit('Failed to zip files.');
					}
				}

				// unset global vars
				unset($VISITS_TO_UNLINK);
				unset($UPLOADED_VISITS);
				unset($F3625_VISITS);
				unset($ELEC_VISITS); 		
			} catch (Exception $e) {
				echo "<font color='red'>Visit Pdfs can't merged into single pdf due to invalid encoded Scanned Copy / Uploaded Docs of visit.</font>";

				foreach($VISITS_TO_UNLINK as $name){
					if (strpos($name, 'datastore') == FALSE) {
					  @unlink($name);
					}
				}

				// unset global vars
				unset($VISITS_TO_UNLINK);
				unset($UPLOADED_VISITS);
				unset($F3625_VISITS);
				unset($ELEC_VISITS); 		

				exit();
			}

		} else {
			exit('At least one Task/Visit must be selected');
		}
	}
 	
 	function modal_filter() {
		// LOAD MODELS
		$this->load->model('visitlog/task/mparams');
		
		$this->tpl->assign('faction', 'modalCheckEpassword');
						
		$rules = array ('user_epass' 	=> 'required|callback_verify_epass');
		$this->validation->set_rules($rules);

		if ($this->validation->run() == FALSE) 
		{
			//
			$this->tpl->assign_include("dynamic_tpl", "useragency/visitlog/task_modal_filter");
			$this->tpl->view("parts/ibase", $this->lang->language);
			
		} else {
			
			/* approve medication, save into pat_medical_approval		 */
			$this->patientmedicationapprovalmdl->patient_id=$patient_id;
			$this->patientmedicationapprovalmdl->approved_user_id=$this->getUserId();
			$this->patientmedicationapprovalmdl->approve();
			
			echo "<script>parent.cancelModal();</script>";
		}
		
	}

	function contractor_contacts_grid($agency_id) {
 	    $this->load->model("contractorcontactsmdl");
        $this->xml->root_name = "rows";
        $document = $this->xml->Document();
        $contractor_id = $this->getAgencyId();
        $head = $this->xml->Element("head");
        $head->append($this->xml->Element("column", "width=3;type=ch", " "));
        $head->append($this->xml->Element("column", "width=*", "Dept/Role Descrip"));
        $head->append($this->xml->Element("column", "width=*", "Email"));
        $head->append($this->xml->Element("column", "width=*", "Phone"));
        $head->append($this->xml->Element("column", "width=*", "Ext"));

        //$head->append($this->xml->Element("column", "width=5;align=center;type=link", "#cspan"));

        $head->append($this->xml->Element("settings", null, $this->xml->Element("colwidth", null, "%")));
        $document->append($head);
        $data = $this->contractorcontactsmdl->getContractorContacts($contractor_id, $agency_id);
        foreach ($data as $d) {
            $cell = $this->xml->Element("row", "id=" . $d->contact_id );
            if( $d->make_default == 0 ) {
                $cell->append($this->xml->Element("cell", null, "0"));
            } else {
                $cell->append($this->xml->Element("cell", null, "1"));
            }
            $cell->append($this->xml->Element("cell", null, $d->tab_description));
            $cell->append($this->xml->Element("cell", null, $d->email));
            $cell->append($this->xml->Element("cell", null, $d->phone));
            $cell->append($this->xml->Element("cell", null, $d->phone_ext));



            $document->append($cell);
        }
	}
	
	public function validate_email_duplicate() {
		if ($this->input->post('contact_ids') != "") {
		  $contact_ids = explode(",", $this->input->post('contact_ids'));
		  $this->load->model("contractorcontactsmdl");	
	
		  $contacts = $this->contractorcontactsmdl->getByIds($contact_ids);
		  foreach ($contacts as $contact) {
			$to_emails[] = $contact->email;
		  }
		  
		  if ($this->input->post('email_agency') ==  1) {
			if ($this->input->post('email_copy_company') == 1) {
				$company = $this->agencymdl->getByAgencyId($this->getAgencyId());
				$to_emails[] = $company->agency_email;
			  }

			if (in_array($this->input->post('email'), $to_emails)) {
			  $this->validation->set_message('validate_email_duplicate', "Error: Duplicated Emails");
			  return false;
			}
		  }
		}
		
	  }
 }
