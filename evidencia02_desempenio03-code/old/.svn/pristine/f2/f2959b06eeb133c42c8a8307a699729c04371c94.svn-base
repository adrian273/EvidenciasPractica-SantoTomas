<?php

class Note extends My_Controller {

	function Note () {
		
		parent::My_Controller();
		
		$this->tpl->assign("resource_path", "patient/note");
		$this->tpl->assign('tab_page', true);
		
	}

	function index ( $patient_id ) {

		$agency = $this->agencymdl->getByAgencyId($this->getAgencyId());

		$this->tpl->assign("entity_id", $patient_id);
		$this->tpl->assign("add_sufix", "Note");
		$this->tpl->assign_include("filter_tpl", "patient/notes/gfilter");
		$this->tpl->assign_include("dynamic_tpl", "parts/gbase");
		$this->tpl->view("parts/ibase", $this->lang->language);
		
	}

	function grid ( $patient_id ) {

		$this->xml->root_name = "rows";
		$document = $this->xml->Document();

		$head = $this->xml->Element("head");
		$head->append($this->xml->Element("column", "width=15;align=center", "Note Date"));
		$head->append($this->xml->Element("column", "width=20", "Created By User"));
		$head->append($this->xml->Element("column", "width=*", "Notes Description"));
		$head->append($this->xml->Element("settings", null, $this->xml->Element("colwidth", null, "%")));
		$document->append($head);

		$agency_id = $this->getAgencyId();
		foreach ($this->patientnotemdl->getAgencyUserid($patient_id, $agency_id) as $note) {

			$cell = $this->xml->Element("row", "id=" . $note->note_id);
			$cell->append($this->xml->Element("cell", null, standard_date(mysql_to_unix($note->creation_date_time))));
			$cell->append($this->xml->Element("cell", null, $note->first_name . " " . $note->last_name));
			$cell->append($this->xml->Element("cell", null, $this->xml_entities($note->notes_descrip)));
			$document->append($cell);

		}
	}

	function add ( $patient_id ) {

		$this->tpl->assign('faction', 'add');
		$this->tpl->assign("entity_id", $patient_id);
		
		$this->validation->set_rules(array('notes_descrip' => 'required'));
		
		if ($this->validation->run() == FALSE) {
			
			$this->tpl->assign_include("dynamic_tpl", "parts/fbase");
			$this->tpl->assign_include("dynamic_form", "patient/notes/add_form");
			$this->tpl->view("parts/ibase", $this->lang->language);
			
		} else {
			
			$this->assignPostData($this->patientnotemdl);
			$this->patientnotemdl->creation_user = $this->getUsAgyId();
			$this->patientnotemdl->patient_id 	 = $patient_id;
			$this->patientnotemdl->insert();
			
			$this->tpl->assign('gmessage', "Note " . $this->lang->line('grl_add_msg'));
			
			$this->index($patient_id);
			
		}

	}
	
	function edit ( $patient_id, $note_id ) {
		
		$this->tpl->assign('faction', 'edit');
		$this->tpl->assign("record_id", $note_id);
		$this->tpl->assign("entity_id", $patient_id);
		
		$note = $this->patientnotemdl->getById($note_id);
		$this->assignObject($note);
		
		$this->validation->set_rules(array('notes_descrip' => 'required'));
		
		if ($this->validation->run() == FALSE) {

			if ($this->getUsAgyId() != $note->creation_user && $this->getUserProfileId() != 1) {
				$this->tpl->assign('no_commit_form', true);
			}
			
			$this->tpl->assign_include("dynamic_tpl", "parts/fbase");
			$this->tpl->assign_include("dynamic_form", "patient/notes/edit_form");
			$this->tpl->view("parts/ibase", $this->lang->language);
			
		} else {
			
			$this->assignPostData($this->patientnotemdl);
			$this->patientnotemdl->update($note_id, $this->input->post('note_type'), $this->input->post('notes_descrip'));
			
			$this->tpl->assign('gmessage', "Note " . $this->lang->line('grl_upd_msg'));
			
			$this->index($patient_id);
			
		}

	}
	
	function delete ( $patient_id, $note_id ) {
		
		$note = $this->patientnotemdl->getById($note_id);
		
		if ($this->getUsAgyId() == $note->creation_user || $this->getUserProfileId() == 1) {
			
			$this->patientnotemdl->delete($note_id);
			$this->tpl->assign('gmessage', "Note " . $this->lang->line('grl_del_msg'));
			
		}	
			
		$this->index($patient_id);
				
	}

	function xml_entities($text, $charset = 'Windows-1252'){
    //return $text;    
    // Debug and Test
    // $text = "test &amp; &trade; &amp;trade; abc &reg; &amp;reg; &#45;";
    
    // First we encode html characters that are also invalid in xml
    //$text = htmlentities($text, ENT_COMPAT, $charset, false);
    $text = htmlentities($text, ENT_QUOTES);
    $text=str_replace("'","",$text);
    $text=str_replace('"',"",$text);
    
    return $text;
    
    // XML character entity array from Wiki
    // Note: &apos; is useless in UTF-8 or in UTF-16
    $arr_xml_special_char = array("&quot;","&amp;","&apos;","&lt;","&gt;");
    
    // Building the regex string to exclude all strings with xml special char
    $arr_xml_special_char_regex = "(?";
    foreach($arr_xml_special_char as $key => $value){
        $arr_xml_special_char_regex .= "(?!$value)";
    }
    $arr_xml_special_char_regex .= ")";
    
    // Scan the array for &something_not_xml; syntax
    $pattern = "/$arr_xml_special_char_regex&([a-zA-Z0-9]+;)/";
    
    // Replace the &something_not_xml; with &amp;something_not_xml;
    $replacement = '&amp;${1}';
    return preg_replace($pattern, $replacement, $text);
  }

}
