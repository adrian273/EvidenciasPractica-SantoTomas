<?php

include 'visitform.php';

class stpn extends VisitForm
{

    public function stpn()
    {

        parent::VisitForm();

        $this->load->model('stpnmdl');

        $this->tpl->assign("resource_path", "task/stpn");
        $this->tpl->assign(array(
            "tab_page" => true,
        ));

        $this->tpl->assign('tab_43_list', $this->parametermdl->getByType(43));
        $this->tpl->assign('tab_87_list', $this->parametermdl->getByType(87));
        $this->tpl->assign('tab_93_list', $this->parametermdl->getByType(93));
        $this->tpl->assign('validatationVisit', true);
    }

    public function index($visit_log_id, $action = 'task', $window = 'self')
    {

        $visitlog = $this->visitlogmdl->getById($visit_log_id);

        $visit_user = $this->usagymdl->getByUsAgyId($visitlog->visit_user_id);
        $company_settings = $this->agencysettingsmdl->get($visit_user->agency_id);

        $this->db->where('tab_083_visit_status', $visitlog->visit_status_id);
        $query = $this->db->get('color_lengend_mycalendar');
        $row = $query->row();
        $visit_tab_status_color = $row->color_backg;
        $this->tpl->assign("visit_tab_status_color", $visit_tab_status_color);

        $prev_visit_log_id = null;
        $next_visit_log_id = null;

        if (!count($this->stpnmdl->get($visit_log_id)) or $visitlog->visit_status_id == 1) {
            $stpns = $this->stpnmdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id);
            if (count($stpns) == 0) {
                $stpns = $this->stpnmdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id, true);
            }

            if (count($stpns)) {
                $stpn = $stpns[count($stpns) - 1];

                $prev_visit_log_id = $stpn->visit_log_id;

                $not_to_import = array(
                    'visit_log_id',
                    'st_progress_note_id',
                    'tab_75_pain_assessment',
                    'pain_location',
                    'pain_control',
                    'system_bp',
                    'system_bp_right_left',
                    'system_bp_sitt_lyi_stand',
                    'system_hr',
                    'system_o2_sat',
                    'system_skin',
                    'primary_diag',
                    'secondary_diag',
                    'primary_diag_date',
                    'secondary_diag_date',
                    'supervisor_signed',
                    'upload_document_name',
                    'upload_document_name2',
                );

                if ($visit_user->short_description == 'ST') {
                    $not_to_import[] = 'ther_supervisor';
                }

                foreach ($stpn as $k => $v) {
                    if (!in_array($k, $not_to_import) and property_exists($this->stpnmdl, $k)) {
                        $this->stpnmdl->$k = $v;
                    }

                }

                if (count($this->stpnmdl->get($visit_log_id))) {
                    $this->stpnmdl->visit_log_id = $visit_log_id;
                    $this->stpnmdl->update($visit_log_id);
                } else {
                    $this->stpnmdl->visit_log_id = $visit_log_id;
                    $this->stpnmdl->insert($visit_log_id);
                }
            }

        } else {
            $stpns = $this->stpnmdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id);
            if (count($stpns)) {
                $stpn = $stpns[count($stpns) - 1];

                $prev_visit_log_id = $stpn->visit_log_id;

            }
        }

        $stpns = $this->stpnmdl->getNext(null, $visitlog->visit_date_time, $visitlog->cms485_id);
        if (count($stpns)) {
            $stpn = $stpns[0];

            $next_visit_log_id = $stpn->visit_log_id;
        }

        $this->tpl->assign("prev_visit_log_id", $prev_visit_log_id);
        $this->tpl->assign("next_visit_log_id", $next_visit_log_id);

        $this->assignObject($visitlog);
        $stpn = $this->stpnmdl->get($visit_log_id);
        if (empty($stpn)) {
            $stpn = $this->stpnmdl->getEmpty();
        }
        $this->assignObject($stpn);

        /*
         * import diagnosis 4 fields from previous Eval
         */
        $prev_eval = array();
        if (empty($prev_eval)) {
            $this->load->model('stevmdl');
            $stevs = $this->stevmdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id);
            if (count($stevs) == 0) {
                $stevs = $this->stevmdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id, true); // Look into all prev periods
            }
            if (count($stevs)) {
                $prev_eval = $stevs[count($stevs) - 1];
            }
        }
        if (empty($prev_eval)) {
            $this->load->model('ptevmdl');
            $ptevs = $this->ptevmdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id);
            if (count($ptevs) == 0) {
                $ptevs = $this->ptevmdl->getPrevious(null, @$visitlog->visit_date_time, @$visitlog->cms485_id, true); // look all PTEV of current SOC
            }
            if (count($ptevs)) {
                $prev_eval = $ptevs[count($ptevs) - 1];
            }
        }
        if (empty($prev_eval)) {
            $this->load->model('otevmdl');
            $otevs = $this->otevmdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id);
            if (count($otevs) == 0) {
                $otevs = $this->otevmdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id, true); // Look into all prev periods
            }
            if (count($otevs)) {
                $prev_eval = $otevs[count($otevs) - 1];
            }
        }

        if (isset($prev_eval->primary_diag)) {
            $this->tpl->assign("primary_diag", $prev_eval->primary_diag);
        }
        if (isset($prev_eval->secondary_diag)) {
            $this->tpl->assign("secondary_diag", $prev_eval->secondary_diag);
        }
        if (isset($prev_eval->primary_diag_date)) {
            $this->tpl->assign("primary_diag_date", $prev_eval->primary_diag_date);
        }
        if (isset($prev_eval->secondary_diag_date)) {
            $this->tpl->assign("secondary_diag_date", $prev_eval->secondary_diag_date);
        }
        /*
         * End of importing diagnosis fields
         */

        if (@$stpn->ther_na == '1') {
            $this->tpl->assign("show_therapy_sup_report", "no");
        } else if (@$stpn->ther_name != null || @$stpn->ther_implem_plan != null || @$stpn->ther_follow_plan != null || @$stpn->ther_raport_pat_fam != null || @$stpn->ther_eval_plan != null || @$stpn->ther_notes != null) {
            $this->tpl->assign("show_therapy_sup_report", "yes");
        } else {
            $this->tpl->assign("show_therapy_sup_report", "no");
        }

        $rules = array(
            'visit_duration' => 'required|callback_checkduration',
        );

        $fields = array(
            'visit_duration' => 'Visit Duration',
        );

        $this->validation->set_fields($fields);
        $this->validation->set_rules($rules);

        if ($this->validation->run() == true) {

            if ($this->updateFormEdition($visit_log_id)) {
                $this->assignPostData($this->stpnmdl);

                if ($this->input->post('ther_na') == 1 or $this->input->post('ther_na') == '1') {
                    $this->stpnmdl->ther_name = null;
                    $this->stpnmdl->ther_implem_plan = null;
                    $this->stpnmdl->ther_follow_plan = null;
                    $this->stpnmdl->ther_raport_pat_fam = null;
                    $this->stpnmdl->ther_eval_plan = null;
                    $this->stpnmdl->ther_notes = null;
                } else {
                    $this->stpnmdl->ther_na = null;
                }

                $stpn = $this->stpnmdl->get($visit_log_id);
                if (count($stpn)) {
                    $this->stpnmdl->st_progress_note_id = $stpn->st_progress_note_id;
                    $this->stpnmdl->update($visit_log_id);
                } else {
                    $this->stpnmdl->insert($visit_log_id);
                }

                if ($this->input->post('visit_status_id') == 3) {
                    // Submitted for approval. check is co-signer assigned. If assigned then need to send notification to co-signer.
                    if ($this->stpnmdl->ther_supervisor and $this->stpnmdl->supervisor_signed != 1) {
                        if (isset($company_settings->override_ptpn_sup_co_sign) and $company_settings->override_ptpn_sup_co_sign == 1) {
                            // when "Override Superv ELECTRONIC Co-sign"is ON. ** this action will override the ELEC text even if the Supervisor Therapist doesn't actually sign.
                            $this->stpnmdl->updateFlex($visit_log_id, 'supervisor_signed', 1);

                        } else if (isset($company_settings->ptpn_req_co_sign) and $company_settings->ptpn_req_co_sign == 1) {
                            $config = &get_config();

                            $this->messagemdl->user_from = $this->getUsAgyId();
                            $this->messagemdl->msg_type = 'email';
                            $this->messagemdl->msg_subject = 'You have a note to sign';
                            $this->messagemdl->msg_text = 'A PTPN note is waiting for your sign before approval. <a href="javascript://" onclick="window.location.href=\'' . $config["index_url"] . 'task/task/edit/' . $visit_log_id . '\';">Click here</a> to open the note.';
                            $msg_id = $this->messagemdl->insert();

                            $this->usermessagemdl->insert($msg_id, $this->stpnmdl->ther_supervisor, 0);
                        }
                    }
                }

                //echo $visitlog->visit_status_id."::".$this->visitlogmdl->visit_status_id;
                if ($visitlog->visit_status_id != $this->visitlogmdl->visit_status_id and $this->visitlogmdl->visit_status_id == 8) {
                    // when tasks are "sent for approval" they should be copied to the vt_st_progress_note_copy table
                    $this->db->query("REPLACE INTO vt_st_progress_note_copy SELECT * FROM `vt_st_progress_note` WHERE visit_log_id = {$visit_log_id}");
                }

                $this->load->helper('ajax');
                if (isAjax()) {
                    echo "1";
                    exit;
                } else {
                    $stpn = $this->stpnmdl->get($visit_log_id);
                    if (@$stpn->ther_na == '1') {
                        $this->tpl->assign("show_therapy_sup_report", "no");
                    } else if (@$stpn->ther_name != null || @$stpn->ther_implem_plan != null || @$stpn->ther_follow_plan != null || @$stpn->ther_raport_pat_fam != null || @$stpn->ther_eval_plan != null || @$stpn->ther_notes != null) {
                        $this->tpl->assign("show_therapy_sup_report", "yes");
                    } else {
                        $this->tpl->assign("show_therapy_sup_report", "no");
                    }

                    $this->assignObject($stpn);
                }
            }

            $this->formRedirection($visit_log_id);

        }

        $this->tpl->assign('ther_name_list', $this->teammdl->getAll($visitlog->patient_id, array(
            4,
            5,
        )));
        $this->tpl->assign('ther_supervisor_list', $this->teammdl->getAll($visitlog->patient_id, array(
            4,
        )));

        $additional_buttons = array(
            'Display Evaluation' => "open_popup('" . $this->config->config["index_url"] . "task/stpn/prevEval/" . $visit_log_id . "', 1000, 600)",
        );

        if (($visitlog->visit_status_id == 3 or $visitlog->visit_status_id == 8) and $stpn->ther_supervisor != null and $stpn->supervisor_signed != 1) {
            if (isset($company_settings->ptpn_req_co_sign) and $company_settings->ptpn_req_co_sign == 1) {
                $additional_buttons['Supervisor Signature'] = "SupvisorSignature()";
            }
        }

        if ($visitlog->visit_status_id == 1 or $visitlog->visit_status_id == 2 or $visitlog->visit_status_id == 5) {
            if ($this->getUserProfileId() == 1 || $this->getUserProfileId() == 3 || $visitlog->visit_user_id == $this->getUsAgyId()) {
                if ($stpn->upload_document_name OR $stpn->upload_document_name2) {
                    $additional_buttons['Change Document'] = 'uploadScannedDocument(' . $visit_log_id . ')';
                    $additional_buttons['Remove Document'] = 'removeScannedDocument(' . $visit_log_id . ')';
                } else {
                    $additional_buttons['Upload Scanned Document'] = 'uploadScannedDocument(' . $visit_log_id . ')';
                }
            }
        }

        $additional_buttons['Patient Signature'] = 'capture_pt_signature(' . $visit_log_id . ')';
        $this->tpl->assign('additional_buttons', $additional_buttons);

        $this->getPatientInfo($visit_log_id);
        $this->tpl->assign("visit_log_id", $visit_log_id);
        $this->tpl->assign("window", $window);
        $this->tpl->assign_include("dynamic_form", "task/documents/stpn");
        $this->setfbase($visit_log_id, $action);

        // For user with profile=Company or Agency Manager, for notes w/scanned documents,
        // we need to also display button "Save" in addition to "Submit for approval"
        if ($stpn->upload_document_name
            and $visitlog->visit_user_id != $this->getUsAgyId()
            and ($visitlog->visit_status_id == 1 or $visitlog->visit_status_id == 2)
            and ($this->getUserProfileId() == 1 or $this->getUserProfileId() == 3)) {
            $this->tpl->assign_include("dynamic_tpl", "task/documents/fbase");
        }

        $this->tpl->view("parts/ibase", $this->lang->language);
    }

    public function supervisor_electronic_pass($visit_log_id)
    {

        $this->tpl->assign('faction', 'supervisor_electronic_pass');
        $this->tpl->assign('visit_log_id', $visit_log_id);

        $rules = array('password' => 'required');
        $this->validation->set_rules($rules);

        if ($this->validation->run() == true) {
            $stpn = $this->stpnmdl->get($visit_log_id);
            if (empty($stpn)) {
                $stpn = $this->stpnmdl->getEmpty();
            }
            if ($stpn->ther_supervisor) {
                $supervisor = $this->usagymdl->getByUsAgyId($stpn->ther_supervisor);
                $supervisorUserInfo = $this->usermdl->getById($supervisor->user_id);
                if ($supervisorUserInfo->electronic_signature == md5($this->input->post('password'))) {
                    $this->stpnmdl->updateFlex($visit_log_id, 'supervisor_signed', 1);
                    echo "<script>parent.dhxWins.window('w1').close();parent.location.href='" . $this->config->config["index_url"] . "task/stpn/index/" . $visit_log_id . "';</script>";
                } else {
                    echo "Supervisor Electronic password doesn't match.";
                    exit();
                }
            } else {
                echo "Supervisor not assigned yet.";
                exit();
            }
        } else {

            $this->tpl->assign_include("dynamic_tpl", "task/documents/supervisor_electronic_pass");
            $this->tpl->view("parts/ibase", $this->lang->language);

        }

    }

    public function capture_pt_signature($visit_log_id)
    {
        $visitlog = $this->visitlogmdl->getById($visit_log_id);
        // $stpn = $this->stpnmdl->get($visit_log_id);
        //echo FCPATH;
        $rules = array(
            'signature' => 'required',
        );
        $this->validation->set_rules($rules);
        $this->tpl->assign("visit_log_id", $visit_log_id);

        if ($this->validation->run() == false) {
            // get the image name based on the visit_log_id
            // $visit_log_array = $this->visitlogmdl->getById($visit_log_id);
            //echo "<pre>"; print_r($visit_log_array); echo "</pre>";
            if (isset($visitlog->signature)) {
                $this->tpl->assign("signature", $visitlog->signature);
            }
            $this->tpl->assign_include("dynamic_tpl", "task/capture_pt_signature");
            $this->tpl->view("task/ibase", $this->lang->language);
        } else {
            if (!is_null($this->input->post('signature'))) {
                /*if (empty($stpn)) {
                $this->stpnmdl->visit_log_id = $visit_log_id;
                $this->stpnmdl->insert($visit_log_id);
                }*/

                $signature = $this->input->post('signature');
                $temp_array = explode(",", $signature);
                $encoded_image = $temp_array[1];
                $decoded_image = base64_decode($encoded_image);
                $signature_file_name = "pt_signature_" . $visit_log_id . ".jpg";
                $upload_path = str_replace("\\", "/", FCPATH) . "upload/signatures/";

                file_put_contents($upload_path . $signature_file_name, $decoded_image);
                $this->visitlogmdl->updateSignature($visit_log_id, $signature_file_name);

                $config = &get_config();

                echo 'Signature has been captured and saved successfully.';
                echo '<script>
					setTimeout(function(){
						parent.location.href=\'' . $config["index_url"] . 'task/stpn/index/' . $visit_log_id . '?r=' . time() . '#anchor_pt_signature\';
					}, 2000);
				</script>';
            }
        }
    }

    public function upload_document($visit_log_id)
    {
        $can_upload = false;
        $visitlog = $this->visitlogmdl->getById($visit_log_id);
        $patient = $this->patientmdl->getById($visitlog->patient_id); 

        if ($visitlog->visit_status_id == 1 or $visitlog->visit_status_id == 2 or $visitlog->visit_status_id == 5) {
            if ($this->getUserProfileId() == 1 || $this->getUserProfileId() == 3 || $visitlog->visit_user_id == $this->getUsAgyId()) {
                $can_upload = true;
            }
        }

        if (!$can_upload) {
            exit('Can\'t Upload!');
        }

        if ((isset($_FILES['document']) and $_FILES['document']['error'] == 0) OR (isset($_FILES['document2']) AND $_FILES['document2']['error']==0)) {
            $config = &get_config();

            // Save form 
            $fname = "";
            $fname2 = "";

            if (isset($_FILES['document']) AND $_FILES['document']['error']==0) {
                $fname = $patient->last_name."_".$visitlog->visit_date_time.'_'.$visitlog->visit_log_number.'_'.$visitlog->visit_log_id.'_'.mt_rand().'.'.pathinfo($_FILES['document']['name'], PATHINFO_EXTENSION);
                $fname = str_replace(" ", "_", $fname);
                $fname = str_replace("%", "_", $fname);
                $fname = str_replace("#", "", $fname);
                $fname = str_replace("&", "", $fname);
                $fname = str_replace(":", "-", $fname);
                
                if (!move_uploaded_file($_FILES['document']['tmp_name'], FCPATH . '/datastore/stpn/' . $fname)) {
                    $fname = "";
                }
            }

            if (isset($_FILES['document2']) AND $_FILES['document2']['error']==0) {
                $fname2 = $patient->last_name."_".$visitlog->visit_date_time.'_'.$visitlog->visit_log_number.'_'.$visitlog->visit_log_id.'_'.mt_rand().'.'.pathinfo($_FILES['document2']['name'], PATHINFO_EXTENSION);
                $fname2 = str_replace(" ","_",$fname2);
                $fname2 = str_replace("%","_",$fname2);
                $fname2 = str_replace("#","",$fname2);
                $fname2 = str_replace("&","",$fname2);
                $fname2 = str_replace(":","-",$fname2);
                if (!move_uploaded_file($_FILES['document2']['tmp_name'], FCPATH.'/datastore/stpn/'.$fname2)) {
                    $fname2 = "";
                }
            }


            // $fname = microtime()."_".$fname;
            if($fname OR $fname2) {
                $stpn = $this->stpnmdl->get($visit_log_id);

                if (empty($stpn)) {
                    $this->stpnmdl->visit_log_id = $visit_log_id;
                    $this->stpnmdl->upload_document_name = $fname;
                    $this->stpnmdl->upload_document_name2 = $fname2;
                    $this->stpnmdl->insert($visit_log_id);
                } else {
                    if ($fname) {
                        @unlink(FCPATH . '/datastore/stpn/' . $stpn->upload_document_name);
                        $this->stpnmdl->updateFlex($visit_log_id, 'upload_document_name', $fname);
                    }

                    if ($fname2) {
                        @unlink(FCPATH . '/datastore/stpn/' . $stpn->upload_document_name2);
                        $this->stpnmdl->updateFlex($visit_log_id, 'upload_document_name2', $fname2);
                    }
                }

                $this->visitlogmdl->updateFlex($visit_log_id, 'visit_status_id', 2);
                $this->visitlogmdl->updateFlex($visit_log_id, 'visited_date', $visitlog->visit_date_time);

                echo "<center>Document has been uploaded.</center><SCRIPT>alert('Document has been uploaded');parent.location.href='" . $config["index_url"] . "task/stpn/index/" . $visit_log_id . "';</SCRIPT>";
            } else {
                exit("Document Upload Failed!");
            }
        } else {
            if (isset($_FILES['document']['error']) AND $_FILES['document']['error'] != 0 AND isset($_FILES['document2']['error']) AND $_FILES['document2']['error'] != 0) {
                $error_string = $this->tpl->get_template_vars('error_string');
                $error_string .= "<br>Please select Document";
                $this->tpl->assign("error_string", $error_string);
            }
            
            $stpn = $this->stpnmdl->get($visit_log_id);
            $this->assignObject($stpn);

            $this->tpl->assign("visit_log_id", $visit_log_id);
            $this->tpl->assign_include("dynamic_tpl", "task/documents/upload_stpn_document");
            $this->tpl->view("parts/ibase", $this->lang->language);

        }
    }

    function pre_remove_document($visit_log_id){
        $can_remove = false;
        $visitlog = $this->visitlogmdl->getById($visit_log_id);
        $patient = $this->patientmdl->getById($visitlog->patient_id); 

        if ($visitlog->visit_status_id == 1 OR $visitlog->visit_status_id == 2 OR $visitlog->visit_status_id == 5) {
            if ($this->getUserProfileId() == 1 || $this->getUserProfileId() == 3 || $visitlog->visit_user_id == $this->getUsAgyId()) {
                $can_remove = true;
            }
        }

        if (!$can_remove) {
            exit('Can\'t Remove document!');
        }

        $stpn = $this->stpnmdl->get($visit_log_id);
        $this->assignObject($stpn);
        $this->tpl->assign("visit_log_id", $visit_log_id);
        $this->tpl->assign_include("dynamic_tpl", "task/documents/remove_stpn_document");
        
        $this->tpl->view("parts/ibase", $this->lang->language);
    }

    function remove_document($visit_log_id, $doc_number){
        $can_remove = false;
        $visitlog = $this->visitlogmdl->getById($visit_log_id);

        if ($visitlog->visit_status_id == 1 OR $visitlog->visit_status_id == 2 OR $visitlog->visit_status_id == 5) {
            if ($this->getUserProfileId() == 1 || $this->getUserProfileId() == 3 || $visitlog->visit_user_id == $this->getUsAgyId()) {
                $can_remove = true;
            }
        }

        if (!$can_remove) {
            exit('Can\'t Remove document!');
        }
        $stpn = $this->stpnmdl->get($visit_log_id);
        
        switch ($doc_number) {
            case '1':
                if (isset($stpn->upload_document_name)) {
                    @unlink(FCPATH.'/datastore/stpn/'.$stpn->upload_document_name);
                    $this->stpnmdl->updateFlex($visit_log_id, 'upload_document_name', null);
                }
                break;
            case '2':
                if (isset($stpn->upload_document_name2)) {
                    @unlink(FCPATH.'/datastore/stpn/'.$stpn->upload_document_name2);
                    $this->stpnmdl->updateFlex($visit_log_id, 'upload_document_name2', null);
                }
                break;
            default:
                exit('Document Not found.');
                break;
        }
        
        echo "1";exit();

    }

    public function index_archive($visit_log_id, $action = 'task', $window = 'self')
    {
        $this->load->model('stpnarchivemdl');
        $visitlog = $this->visitlogmdl->getByIdArchive($visit_log_id);

        $this->db->where('tab_083_visit_status', $visitlog->visit_status_id);
        $query = $this->db->get('color_lengend_mycalendar');
        $row = $query->row();
        $visit_tab_status_color = $row->color_backg;
        $this->tpl->assign("visit_tab_status_color", $visit_tab_status_color);

        $prev_visit_log_id = null;
        $next_visit_log_id = null;

        if (!count($this->stpnarchivemdl->get($visit_log_id)) or $visitlog->visit_status_id == 1) {
            $stpns = $this->stpnarchivemdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id);
            if (count($stpns) == 0) {
                $stpns = $this->stpnarchivemdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id, true);
            }

            if (count($stpns)) {
                $stpn = $stpns[count($stpns) - 1];

                $prev_visit_log_id = $stpn->visit_log_id;

                /*$not_to_import = array (
            'visit_log_id',
            'st_progress_note_id',
            'tab_75_pain_assessment',
            'pain_location',
            'pain_control',
            'system_bp',
            'system_bp_right_left',
            'system_bp_sitt_lyi_stand',
            'system_hr',
            'system_o2_sat',
            'system_skin'
            );
            foreach ($stpn as $k => $v) {
            if (!in_array($k, $not_to_import) AND property_exists($this->stpnarchivemdl, $k))
            $this->stpnarchivemdl-> $k = $v;
            }

            if (count($this->stpnarchivemdl->get($visit_log_id))) {
            $this->stpnarchivemdl->visit_log_id = $visit_log_id;
            $this->stpnarchivemdl->update($visit_log_id);
            } else {
            $this->stpnarchivemdl->visit_log_id = $visit_log_id;
            $this->stpnarchivemdl->insert($visit_log_id);
            }*/
            }

        } else {
            $stpns = $this->stpnarchivemdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id);
            if (count($stpns)) {
                $stpn = $stpns[count($stpns) - 1];

                $prev_visit_log_id = $stpn->visit_log_id;

            }
        }

        $stpns = $this->stpnarchivemdl->getNext(null, $visitlog->visit_date_time, $visitlog->cms485_id);
        if (count($stpns)) {
            $stpn = $stpns[0];

            $next_visit_log_id = $stpn->visit_log_id;
        }

        $this->tpl->assign("prev_visit_log_id", $prev_visit_log_id);
        $this->tpl->assign("next_visit_log_id", $next_visit_log_id);

        $this->assignObject($visitlog);
        $this->assignObject($this->stpnarchivemdl->get($visit_log_id));

        /*if ($this->validation->run() == TRUE) {
        $this->updateFormEdition($visit_log_id);
        $this->assignPostData($this->stpnarchivemdl);
        $stpn = $this->stpnarchivemdl->get($visit_log_id);
        if (count($stpn)) {
        $this->stpnarchivemdl->st_progress_note_id = $stpn->st_progress_note_id;
        $this->stpnarchivemdl->update($visit_log_id);
        } else {
        $this->stpnarchivemdl->insert($visit_log_id);
        }

        $this->load->helper('ajax');
        if (isAjax()) {
        echo "1";
        exit;
        }
        $this->formRedirection($visit_log_id);
        }*/

        $this->tpl->assign('ther_name_list', $this->teammdl->getAll($visitlog->patient_id, array(
            4,
            5,
        )));
        $this->tpl->assign('ther_supervisor_list', $this->teammdl->getAll($visitlog->patient_id, array(
            4,
        )));

        $this->getPatientInfoArchive($visit_log_id);
        $this->tpl->assign("visit_log_id", $visit_log_id);
        $this->tpl->assign("window", $window);
        $this->tpl->assign_include("dynamic_form", "task/documents/stpn");
        $this->setfbasearchive($visit_log_id, $action);
        $this->tpl->view("parts/ibase", $this->lang->language);
    }

    public function prevEval($visit_log_id)
    {
        $visitlog = $this->visitlogmdl->getById($visit_log_id);

        $this->load->model('stevmdl');

        $prev_visit_log_id = null;

        $stevs = $this->stevmdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id);

        if (count($stevs) == 0) {
            $stevs = $this->stevmdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id, true); // look all PTEV of current SOC
        }

        if (count($stevs)) {
            $stev = $stevs[count($stevs) - 1];

            $prev_visit_log_id = $stev->visit_log_id;

        }

        if (!$prev_visit_log_id) {
            $stevs = $this->stevmdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id);
            if (count($stevs)) {
                $stev = $stevs[count($stevs) - 1];

                $prev_visit_log_id = $stev->visit_log_id;
            }
        }

        if ($prev_visit_log_id) {
            header("Location: " . $this->config->config["index_url"] . "task/stev/index/" . $prev_visit_log_id);
        } else {
            die("No previous ST Evaluation was found");
        }

    }

    public function pdf($visit_log_id)
    {
        $this->load->helper('visit_pdf');
        stpn_pdf($visit_log_id, 'D');

        return;
    }

    public function edit_template($tpl_id)
    {
        $tpl_type = 'stpn';
        $back_url = $this->session->userdata('task_return');

        $this->load->model('tpl' . $tpl_type . 'mdl', 'visitformtplmdl');
        $this->tpl->assign("tpl_type", $tpl_type);
        // $this->tpl->assign("entity_id", $tpl_type);
        $this->tpl->assign("record_id", $tpl_id);
        $this->tpl->assign("faction", 'edit_template');
        $this->tpl->assign("resource_delete", 'delete_template');
        // $this->tpl->assign("no_delete_form", true);

        // $this->validation->set_rules(array('template_name' => 'required'));
        // $this->validation->set_fields(array('template_name' => 'Template Name'));

        $template_field = "tpl_{$tpl_type}_name";
        $template = $this->visitformtplmdl->get($tpl_id);

        if (empty($template)) {
            exit("Template Not Found!");
        }

        if ($template->user_id != $this->getUserId()) {
            exit("You are not authorized to edit this template");
        }

        if ($this->validation->run() == false) {
            $this->assignObject($template);

            $this->lang->language['grl_cancel'] = 'Back';
            $this->tpl->assign("back_url", $back_url);
            $this->tpl->assign("tpl_type_external_resource", "{$tpl_type}_external_resource");
            $this->tpl->assign("tpl_type_form", "{$tpl_type}_form");
            $this->tpl->assign("form_title", "Edit Template");
            $this->tpl->assign_include("dynamic_tpl", "parts/fbase");
            $this->tpl->assign_include("dynamic_form", "user/templates/edit_data");
            $this->tpl->view("parts/ibase", $this->lang->language);
        } else {
            $this->assignPostData($this->visitformtplmdl);
            $this->visitformtplmdl->tpl_stpn_name = $template->tpl_stpn_name;
            $this->visitformtplmdl->update($tpl_id);

            $this->tpl->assign('gmessage', "Template has been updated");
            redirect("task/stpn/edit_template/" . $tpl_id);
        }
    }

    public function delete_template($tpl_id)
    {
        $tpl_type = 'stpn';
        $back_url = $this->session->userdata('task_return');

        $this->load->model('tpl' . $tpl_type . 'mdl', 'visitformtplmdl');
        $template = $this->visitformtplmdl->get($tpl_id);
        if (empty($template)) {
            exit("Template Not Found!");
        }

        if ($template->user_id != $this->getUserId()) {
            exit("You are not authorized to delete this template");
        }

        $this->visitformtplmdl->delete($tpl_id, $this->getUserId());
        if ($back_url) {
            redirect($back_url);
        } else {
            redirect("user/templates");
        }
    }

    public function checkduration($visit_duration)
    {
        if (!is_numeric($visit_duration)) {
            $this->validation->set_message('checkduration', "Error: please enter number only in visit duration field.");
            return false;
        }

        if ($visit_duration > 300) {
            $this->validation->set_message('checkduration', "Error: visit duration can be 300 minutes maximum.");
            return false;
        }

        return true;
    }

    public function validation_visit($visit_log_id)
    {
        $this->load->model('agencysettingsmdl');
        $agency_conf = $this->agencysettingsmdl->get($this->getAgencyId());
        $msg = 0;
        $validation_success = 0;
        $visitlog = $this->visitlogmdl->getById($visit_log_id);
        $visit_user = $this->usagymdl->getByUsAgyId($visitlog->visit_user_id);
        $rules = array();
        $fields = array();
        if ($agency_conf->st_validation == '1') {

            $rules = array(
                'visit_duration' => 'callback_checkduration',
                'primary_diag' => 'required',
                'primary_diag_date' => 'required',
                'secondary_diag' => 'required',
                'secondary_diag_date' => 'required',
                'tab_43_rehab_poten' => 'required',
                'mental_status' => 'callback_validate_mental_status[mental_status]',
                'tab_75_pain_assessment' => 'required',
                'pain_control' => 'required',
                'system_bp' => 'required',
                'system_bp_right_left' => 'required',
                'system_bp_sitt_lyi_stand' => 'required',
                'system_o2_sat' => 'required',
                'system_skin' => 'required',
                'treatment' => 'callback_validate_treatment[treatment]',
                'treat_other' => 'callback_validate_treat_other[treat_other]',
                'auditory_sing_tab_93' => 'required',
                'auditory_senten_tab_93' => 'required',
                'auditory_paragra_tab_93' => 'required',
                'auditory_conver_tab_93' => 'required',
                'auditory_other_tab_93' => 'required',
                'reading_matching_tab_93' => 'required',
                'reading_single_tab_93' => 'required',
                'reading_senten_tab_93' => 'required',
                'reading_paragra_tab_93' => 'required',
                'reading_convers_tab_93' => 'required',
                'reading_other_tab_93' => 'required',
                'verbal_word_tab_93' => 'required',
                'verbal_artic_tab_93' => 'required',
                'verbal_sentence_tab_93' => 'required',
                'verbal_visual_tab_93' => 'required',
                'verbal_entellig_tab_93' => 'required',
                'verbal_automatic_tab_93' => 'required',
                'verbal_YN_tab_93' => 'required',
                'verbal_apraxia_tab_93' => 'required',
                'verbal_other_desc_tab_93' => 'required',
                'written_fine_tab_93' => 'required',
                'written_sign_tab_93' => 'required',
                'written_coping_tab_93' => 'required',
                'written_indepe_tab_93' => 'required',
                'written_other_tab_93' => 'required',
                'dysar_resp_tab_93' => 'required',
                'dysar_phona_tab_93' => 'required',
                'dysar_reson_tab_93' => 'required',
                'dysar_artic_tab_93' => 'required',
                'dysar_prosody_tab_93' => 'required',
                'dyspha_non_oral_tab_93' => 'required',
                'dyspha_food_consis_tab_93' => 'required',
                'dyspha_post_assists_tab_93' => 'required',
                'dyspha_oral_tab_93' => 'required',
                'dyspha_pharyn_tab_93' => 'required',
                'dyspha_esopha_tab_93' => 'required',
                'dyspha_other_tab_93' => 'required',
                'right_attention_tab_93' => 'required',
                'right_self_tab_93' => 'required',
                'right_other_tab_93' => 'required',
                'head_attention_tab_93' => 'required',
                'head_self_tab_93' => 'required',
                'head_other_tab_93' => 'required',
                'progress_deterioration' => 'required',
                'services_provided' => 'required',
                'home_bound_status' => 'callback_validate_hbs[home_bound_status]',
                'home_bound_other' => 'callback_validate_hbo[home_bound_other]',
                'coordination_of_care' => 'callback_validate_coor[coordination_of_care]',
                'dc_planning' => 'callback_validate_dc_planning[dc_planning]',
                'dc_plan_other' => 'callback_validate_dc_plan_other[dc_plan_other]',
                //'ther_supervisor' => 'required',
                'addendum' => 'required',
            );
            $fields = array(
                'primary_diag' => 'Primary Diagnosis',
                'primary_diag_date' => 'Primary Diagnosis Date',
                'secondary_diag' => 'Therapy Diagnosis',
                'secondary_diag_date' => 'Therapy Diagnosis Date',
                'tab_43_rehab_poten' => 'Rehab Potential',
                'mental_status' => 'Mental Status',
                'tab_75_pain_assessment' => 'Pain Assessment',
                'pain_location' => 'Location',
                'pain_control' => 'Control Paint Control',
                'system_bp' => 'BP',
                'system_bp_right_left' => 'L or R',
                'system_bp_sitt_lyi_stand' => 'Sitting or Lying or Standing',
                'system_hr' => 'HR',
                'system_o2_sat' => '02 Sat',
                'system_skin' => 'Skin',
                'auditory_sing_tab_93' => 'Single Words',
                'auditory_senten_tab_93' => 'Sentences/Direction',
                'auditory_paragra_tab_93' => 'Paragraphs',
                'auditory_conver_tab_93' => 'Conversation',
                'auditory_other_tab_93' => 'Other',
                'reading_matching_tab_93' => 'Matching level	',
                'reading_single_tab_93' => 'Single Words	',
                'reading_senten_tab_93' => 'Sentences',
                'reading_paragra_tab_93' => 'Paragraphs',
                'reading_convers_tab_93' => 'Conversation',
                'reading_other_tab_93' => 'Other',
                'verbal_word_tab_93' => 'Word Recall	',
                'verbal_artic_tab_93' => 'Articulation',
                'verbal_sentence_tab_93' => 'Sentences Formation',
                'verbal_visual_tab_93' => 'Visual Confrontation Naming',
                'verbal_entellig_tab_93' => 'Entelligibility',
                'verbal_automatic_tab_93' => 'Automatic Speech',
                'verbal_YN_tab_93' => 'Yes/no response',
                'verbal_apraxia_tab_93' => 'Apraxia',
                'verbal_other_desc_tab_93' => 'Other',
                'written_fine_tab_93' => 'Fine Motor',
                'written_sign_tab_93' => 'Signature',
                'written_coping_tab_93' => 'Coping',
                'written_indepe_tab_93' => 'Independent',
                'written_other_tab_93' => 'Other',
                'dysar_resp_tab_93' => 'Respiration',
                'dysar_phona_tab_93' => 'Phonation',
                'dysar_reson_tab_93' => 'Resonance',
                'dysar_artic_tab_93' => 'Articulation',
                'dysar_prosody_tab_93' => 'Prosody',
                'dyspha_non_oral_tab_93' => 'Non - Oral Feeding',
                'dyspha_food_consis_tab_93' => 'Food consistency',
                'dyspha_post_assists_tab_93' => 'Postural Assists',
                'dyspha_oral_tab_93' => 'Oral Phase',
                'dyspha_pharyn_tab_93' => 'Pharyngeal Phase',
                'dyspha_esopha_tab_93' => 'Esophageal Phase',
                'dyspha_other_tab_93' => 'Other',
                'right_attention_tab_93' => 'Attention / Memory / Retention',
                'right_self_tab_93' => 'Self- monitoring judgment',
                'right_other_tab_93' => 'Other',
                'head_attention_tab_93' => 'Attention / Memory / Retention',
                'head_self_tab_93' => 'Self-monitoring / Judgment',
                'head_other_tab_93' => 'Other',
                'progress_deterioration' => 'Progress / deterioration',
                'services_provided' => 'Services Provided',
                //'ther_supervisor' => 'Supervising Therapist',
                'addendum' => 'Addendum',

            );
            if ($agency_conf->ptpn_req_co_sign == 1) {
                if($visit_user->discipline_id == 3 || $visit_user->discipline_id == 5 || $visit_user->discipline_id == 7) {
                    $rules['ther_supervisor'] = 'required';
                    $fields['ther_supervisor'] = 'Supervising Therapist';
                }
            }
            $this->validation->set_rules($rules);
            $this->validation->set_fields($fields);
            if ($this->validation->run() == true) {
                $validation_success = 1;
            } else {
                $msg = $this->validation->get_error_msg();
            }
        } else {
            if ($agency_conf->ptpn_req_co_sign == 1) {
                if($visit_user->discipline_id == 3 || $visit_user->discipline_id == 5 || $visit_user->discipline_id == 7) {
                    $rules = array('ther_supervisor' => 'required');
                    $fields = array('ther_supervisor' => 'Supervising Therapist');
                }
                $this->validation->set_rules($rules);
                $this->validation->set_fields($fields);
    
                if ($this->validation->run() == true) {
                    $validation_success = 1;
                } else {
                    $msg = $this->validation->get_error_msg();
                }
            } else {
                $validation_success = 2;
            }
        }
        echo json_encode(array('validation_success' => $validation_success, 'msg' => $msg));
        exit();
    }

    public function validate_mental_status($mental_status)
    {
        $config = array(
            'name_callback' => 'validate_mental_status',
            'value' => $mental_status,
            'msg' => 'Mental Status',
        );
        if ($this->validate_check($config) === false) {
            return false;
        } else {
            return true;
        }

    }

    public function validate_treatment($treatment)
    {
        $config = array(
            'name_callback' => 'validate_treatment',
            'value' => $treatment,
            'msg' => 'Treatment',
        );
        if ($this->validate_check($config) === false) {
            return false;
        } else {
            return true;
        }

    }

    public function validate_treat_other($treat_other)
    {
        $config = array(
            'name_callback' => 'validate_treat_other',
            'value_other' => $treat_other,
            'value_other_desc' => $this->input->post('treat_other_desc'),
            'msg' => 'Treatment Other ',
        );
        if ($this->validate_other($config) === false) {
            return false;
        } else {
            return true;
        }

    }

    public function validate_hbs($home_bound_status)
    {
        $config = array(
            'name_callback' => 'validate_hbs',
            'value' => $home_bound_status,
            'msg' => 'Home bound status',
        );
        if ($this->validate_check($config) === false) {
            return false;
        } else {
            return true;
        }

    }

    public function validate_hbo($home_bound_other)
    {
        $config = array(
            'name_callback' => 'validate_hbo',
            'value_other' => $home_bound_other,
            'value_other_desc' => $this->input->post('home_bound_other_description'),
            'msg' => 'Home Bound Status Other ',
        );
        if ($this->validate_other($config) === false) {
            return false;
        } else {
            return true;
        }

    }

    public function validate_coor($coordination_of_care)
    {
        $config = array(
            'name_callback' => 'validate_coor',
            'value' => $coordination_of_care,
            'msg' => 'Coordination of Care',
        );
        if ($this->validate_check($config) === false) {
            return false;
        } else {
            return true;
        }

    }

    public function validate_dc_plan_other($validate_dc_plan_other)
    {
        $config = array(
            'name_callback' => 'validate_dc_plan_other',
            'value_other' => $validate_dc_plan_other,
            'value_other_desc' => $this->input->post('dc_plan_other_desc'),
            'msg' => 'D/C Planning / Plan Other ',
        );
        if ($this->validate_other($config) === false) {
            return false;
        } else {
            return true;
        }

    }

    public function validate_dc_planning($dc_planning)
    {
        $config = array(
            'name_callback' => 'validate_dc_planning',
            'value' => $dc_planning,
            'msg' => 'D/C Planning / Plan',
        );
        if ($this->validate_check($config) === false) {
            return false;
        } else {
            return true;
        }

    }

    public function validate_check($item = array())
    {
        if ($item['value'] == "0") {
            $this->validation->set_message("{$item['name_callback']}", 'Check at least one value in ' . $item['msg']);
            return false;
        } else {
            return true;
        }
    }

    public function validate_other($item = array())
    {
        if ($item['value_other']) {
            if (!$item['value_other_desc'] || $item['value_other_desc'] === "") {
                $this->validation->set_message("{$item['name_callback']}", $item['msg'] . "Description Required");
                return false;
            } else {
                return true;
            }
        }
    }

}
