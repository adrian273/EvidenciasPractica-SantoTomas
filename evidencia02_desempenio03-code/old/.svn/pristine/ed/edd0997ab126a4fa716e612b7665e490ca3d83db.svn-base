<?php

class Cycles extends MY_Controller {

	function Cycles () {		
		parent::MY_Controller();		
		$this->tpl->assign("resource_path", "payroll/cycles");		
		$this->load->model("payrollcyclesmdl");
	}

	function index () {	
		$this->tpl->assign("list_title", "Payroll Cycle List");
		$this->tpl->assign("add_sufix", "Cycle");
		// $this->tpl->assign("no_grid_buttons", true);
		$this->tpl->assign_include("dynamic_tpl", "parts/gbase");
		$this->tpl->view("parts/ibase", $this->lang->language);
	}	

	function cycleYear($year, $type='link') {
		// $options = array('filters'=>array('agency_id'=>$this->getAgencyId(), 'year'=>$year, 'display_cycle'=>1));
		$options = array('filters'=>array('agency_id'=>$this->getAgencyId(), 'year'=>$year));
		$cycles = $this->payrollcyclesmdl->get($options);

		if (count($cycles) > 0) {
			foreach ($cycles as $key => $cycle) {
				$period = $cycle->from_date2.' - '.$cycle->to_date2;
				if ($type=='link') {
					echo '<a class="sample_attach" href="javascript: cycleSelected('.$cycle->id.')">'.$period.'</a>';
				} else {
					echo '<option value="'.$cycle->id.'" label="'.$period.'">'.$period.'</option>';
				}
			}
		} else {
			if ($type=='link') {
				echo '<a class="sample_attach" href="javascript: void(0)">No Cycle Found</a>';
			} else {
				echo '<option value="">No Cycle Found</option>';
			}
		}
		
	}

	function selectCycle () {	
		// $this->tpl->assign("list_title", "Payroll Cycle List");
		// $this->tpl->assign("add_sufix", "Cycle");
		$this->tpl->assign("no_grid_buttons", true);
		$this->tpl->assign_include("filter_tpl", "payroll/cycles/select_filter");
		$this->tpl->assign_include("dynamic_tpl", "parts/gbase");
		$this->tpl->view("parts/ibase", $this->lang->language);
	}	
	
	function grid () {
		$this->xml->root_name = "rows";
		$document = $this->xml->Document();

		$head = $this->xml->Element("head");
		$head->append($this->xml->Element("column", "width=10;align=center",  "Display Cycle"));
		$head->append($this->xml->Element("column", "width=*", "Payroll From Date"));
		$head->append($this->xml->Element("column", "width=*", "Payroll Thru Date"));
		$head->append($this->xml->Element("column", "width=*", "Payment Date"));
		// $head->append($this->xml->Element("column", "width=6;align=center;type=link", "Actions"));
		$head->append($this->xml->Element("settings", null, $this->xml->Element("colwidth", null, "%")));
		$document->append($head);
		$pars_options = array('filters' => array('agency_id' => $this->getAgencyId()));
		foreach ($this->payrollcyclesmdl->get($pars_options) as $cycle) {			
			$cell = $this->xml->Element("row", "id=" . $cycle->id);

			$commentsCellStr = '<![CDATA[';
			if($cycle->display_cycle == 1) {
		        $commentsCellStr.= '<a href="javascript://" onclick="(isIE()?event:arguments[0]).cancelBubble = true;"><img src="'.$this->config->config["base_url"].'style/images/drop-yes.gif" width="16" border="0" /></a>';
		    }
		    $commentsCellStr .= ']]>';  			
			$cell->append($this->xml->Element("cell", null, $commentsCellStr));

			$cell->append($this->xml->Element("cell", null, standard_date(mysql_to_unix($cycle->from_date, 'MYSQL_NOTIME'))));
			$cell->append($this->xml->Element("cell", null, standard_date(mysql_to_unix($cycle->to_date, 'MYSQL_NOTIME'))));
			$cell->append($this->xml->Element("cell", null, standard_date(mysql_to_unix($cycle->payment_date, 'MYSQL_NOTIME'))));
			$document->append($cell);
		}
	}
		
	function add () {
		$this->tpl->assign('faction', 'add');
		
		$rules = array ('from_date'	=> 'required',
						'to_date' => 'required',
						'payment_date' => 'required');
		$fields = array ('from_date'	=> 'Payroll From Date',
						'to_date' => 'Payroll Thru Date',
						'payment_date' => 'PAyment Date');
		
		$this->validation->set_rules($rules);
		$this->validation->set_fields($fields);
		
		if ($this->validation->run() == FALSE) {
			$this->tpl->assign("form_title", "Add Payroll Cycle");
			$this->tpl->assign_include("dynamic_tpl", "parts/fbase");
			$this->tpl->assign_include("dynamic_form", "payroll/cycles/form");
			$this->tpl->view("parts/ibase", $this->lang->language);
		} else {
			$this->assignPostData($this->payrollcyclesmdl);
			$this->payrollcyclesmdl->insert($this->getAgencyId());
			$this->tpl->assign('gmessage', "Payroll Cycle " . $this->lang->line('grl_add_msg'));			
			$this->index();			
		}		
	}
		
	function edit ( $id ) {
		$this->tpl->assign('faction', 'edit');
		$this->tpl->assign('record_id', $id);
		
		$cycle = $this->payrollcyclesmdl->getById($id);
		if (empty($cycle)) {
			exit('Cycle not found.');
		}

		if ($cycle->agency_id != $this->getAgencyId()) {
			exit("You can't edit this cycle!");
		}


		$this->assignObject($this->payrollcyclesmdl->getById($id));
		
		$rules = array ('from_date'	=> 'required',
						'to_date' => 'required',
						'payment_date' => 'required');
		$fields = array ('from_date'	=> 'Payroll From Date',
						'to_date' => 'Payroll Thru Date',
						'payment_date' => 'PAyment Date');
						
		$this->validation->set_rules($rules);
		$this->validation->set_fields($fields);
		
		if ($this->validation->run() == FALSE) {
			$this->tpl->assign("form_title", "Edit Payroll Cycle");
			$this->tpl->assign_include("dynamic_tpl", "parts/fbase");
			$this->tpl->assign_include("dynamic_form", "payroll/cycles/form");
			$this->tpl->view("parts/ibase", $this->lang->language);
		} else {
			$this->assignPostData($this->payrollcyclesmdl);
			$this->payrollcyclesmdl->agency_id = $this->getAgencyId();
			$this->payrollcyclesmdl->update($id);
			$this->tpl->assign('gmessage', "Payroll Cycle " . $this->lang->line('grl_upd_msg'));
			$this->index();
		}
	}

	function delete ( $id, $window='self'  ) {
		$cycle = $this->payrollcyclesmdl->getById($id);
		if (empty($cycle)) {
			exit('Cycle not found!');
		}

		// Events can only be deleted  by the user that created the Event.
	    if($cycle->agency_id == $this->getAgencyId()) {	
			$this->payrollcyclesmdl->delete($id);
		} else {
			exit("You can't delete this cycle!");
		}
			
	    if($window=='nw'){
	      echo "<SCRIPT>window.close();</SCRIPT>";
	    }else{
      		header("Location: " . $this->config->config["index_url"] . "payroll/cycles/index");
	  		// $this->index();
	    }
	}

	function selectedCycle($id) {
		$cycle = $this->payrollcyclesmdl->getById($id);
		if (!empty($cycle)) {
			$this->session->set_userdata('payroll_cycle_from_date', standard_date(mysql_to_unix($cycle->from_date, 'MYSQL_NOTIME')));		
			$this->session->set_userdata('payroll_cycle_to_date', standard_date(mysql_to_unix($cycle->to_date, 'MYSQL_NOTIME')));
			$this->session->set_userdata('payroll_cycle_payment_date', standard_date(mysql_to_unix($cycle->payment_date, 'MYSQL_NOTIME')));		
			echo json_encode(array(
					'from_date'=>standard_date(mysql_to_unix($cycle->from_date, 'MYSQL_NOTIME')), 
					'to_date'=>standard_date(mysql_to_unix($cycle->to_date, 'MYSQL_NOTIME')),
					'payment_date'=>standard_date(mysql_to_unix($cycle->payment_date, 'MYSQL_NOTIME')),
					)
				);
		} else {
			echo json_encode(array('error'=>'Cycle not found!'));
		}
	}

}