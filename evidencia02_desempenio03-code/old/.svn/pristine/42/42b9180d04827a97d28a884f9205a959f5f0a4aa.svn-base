<?php
 include('visitform.php');

class Irvi extends VisitForm {

	function Irvi () {
		
		parent::VisitForm();

		$this->load->model('irvimdl');
		
		$this->tpl->assign("resource_path", "task/irvi");
		$this->tpl->assign("this_visit_name", "Incident Report Visit");

		// validate before submit for approval
		$this->tpl->assign("validatationVisit", true);
		
		$this->tpl->assign(array("tab_page" => true));		
	}

	
	/**
	 * irvi form for not CLASS patient
	 */
	function index($visit_log_id, $action = 'task', $window = 'self') {

		$visitlog = $this->visitlogmdl->getById($visit_log_id);

		$patient = $this->patientmdl->getById($visitlog->patient_id); 
	
		$visit_user = $this->usagymdl->getByUsAgyId($visitlog->visit_user_id);
		$agency = $this->agencymdl->getByAgencyId($patient->agency_id);
		$contractor = $this->agencymdl->getByAgencyId($visit_user->agency_id);

		$this->db->where('tab_083_visit_status', $visitlog->visit_status_id);
		$query = $this->db->get('color_lengend_mycalendar');
		$row = $query->row();
		$visit_tab_status_color = $row->color_backg;
		$this->tpl->assign("visit_tab_status_color", $visit_tab_status_color);

		$prev_visit_log_id = null;
		$next_visit_log_id = null;
		$irvi = $this->irvimdl->get($visit_log_id);
		if (!count($irvi) OR $visitlog->visit_status_id == 1) {
			$prevIrvis = $this->irvimdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id);
			if (count($prevIrvis) == 0) {
				$prevIrvis = $this->irvimdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id, TRUE);
			}

			if (count($prevIrvis)) {
				$prevIrvi = $prevIrvis[count($prevIrvis) - 1];

				$prev_visit_log_id = $prevIrvi->visit_log_id;

				$not_to_import = array (
					'visit_log_id',
					'vt121_id',					
					'pt_signed_date',					
					'clinician_signature',					
					'clinician_signed_date',					
					'irvi_notes',
					'upload_document_name',					
				);
				foreach ($prevIrvi as $k => $v) {
					if (property_exists($this->irvimdl, $k)) {
						if (!in_array($k, $not_to_import))
							$this->irvimdl-> $k = $v;
						else if(isset($irvi->$k))
							$this->irvimdl->$k = $irvi->$k;
					}					
				}
				if (count($irvi)) {
					$this->irvimdl->visit_log_id = $visit_log_id;
					$this->irvimdl->update($visit_log_id);
				} else {
					$this->irvimdl->visit_log_id = $visit_log_id;
					$this->irvimdl->insert($visit_log_id);
				}
			}
		} else {
			$prevIrvis = $this->irvimdl->getPrevious(null, $visitlog->visit_date_time, $visitlog->cms485_id);
			if (count($prevIrvis)) {
				$prevIrvi = $prevIrvis[count($prevIrvis) - 1];
				$prev_visit_log_id = $prevIrvi->visit_log_id;
			}
		}
		$nextIrvis = $this->irvimdl->getNext(null, $visitlog->visit_date_time, $visitlog->cms485_id);
		if (count($nextIrvis)) {
			$nextIrvi = $nextIrvis[0];
			$next_visit_log_id = $nextIrvi->visit_log_id;
		}
		//echo $prev_visit_log_id."::".$next_visit_log_id;exit;
		//$this->tpl->assign("form", 'ptpn');  
		$this->tpl->assign("prev_visit_log_id", $prev_visit_log_id);
		$this->tpl->assign("next_visit_log_id", $next_visit_log_id);

		$this->assignObject($visitlog);
		$irvi = $this->irvimdl->get($visit_log_id);
		if (empty($irvi)) {
			$irvi = $this->irvimdl->getEmpty();
			$irvi->visit_log_id = $visit_log_id;
		}
		// if($visitlog->signature != "") {
		// 	$irvi->pt_signature = $visitlog->signature;
		// }
		
		$this->assignObject($irvi);

		$rules = array ('visit_date_time'  		=> 'required',
						);
    	$fields = array ('visit_date_time'  	=> 'Visit Date',
						);
		
		$rules['irvi_notes'] = 'required';
		$fields['irvi_notes'] = 'Notes';
    	
		// $rules['signature'] = 'required';
		// $fields['signature'] = 'Patient Signature';

		$rules['clinician_signature'] = 'required';
		$fields['clinician_signature'] = 'Clinician Signature';

		$rules['visit_duration'] = 'required|callback_checkvisitduration';
		$fields['visit_duration'] = 'Visit Duration';

		if (!$irvi->upload_document_name) {
			if ($this->input->post('visit_status_id') == 3) {
				$this->validation->set_rules($rules);
				$this->validation->set_fields($fields);
			}
		}

    	
		if ($this->validation->run() == TRUE) {
			if($this->updateFormEdition($visit_log_id)){
				$this->assignPostData($this->irvimdl);
				

				$irvi = $this->irvimdl->get($visit_log_id);
				if (count($irvi)) {
					//$this->irvimdl->vt121_id = $irvi->vt121_id; 
					$this->irvimdl->update($visit_log_id);
				} else {
					$this->irvimdl->insert($visit_log_id);
				}

				//echo $visitlog->visit_status_id."::".$this->visitlogmdl->visit_status_id;
				if($visitlog->visit_status_id != $this->visitlogmdl->visit_status_id AND $this->visitlogmdl->visit_status_id == 8){
					// when tasks are "sent for approval" they should be copied to the vt121_incident_report_visit_copy table
					$this->db->query("REPLACE INTO vt121_incident_report_visit_copy SELECT * FROM `vt121_incident_report_visit` WHERE visit_log_id = {$visit_log_id}");
				}


				$this->load->helper('ajax');
				if (isAjax()) {
					echo "1";
					exit;
				}else{
					$irvi = $this->irvimdl->get($visit_log_id);        		
	        		if (empty($irvi)) {
						$irvi = $this->irvimdl->getEmpty();
						$irvi->visit_log_id = $visit_log_id;
					}
	        		$this->assignObject($irvi);

	        		$visitlog = $this->visitlogmdl->getById($visit_log_id);
	        		$this->assignObject($visitlog);
	      		}
			}

			$this->formRedirection($visit_log_id);
		}

		if ($contractor->state_id = 6) {
			// 
		}

		$additional_buttons = array();
		if ($visitlog->visit_status_id == 1 OR $visitlog->visit_status_id == 2 OR $visitlog->visit_status_id == 5) {
			if ($this->getUserProfileId() == 1 || $this->getUserProfileId() == 3 || $visitlog->visit_user_id == $this->getUsAgyId()) {
				if ($irvi->upload_document_name ) {
					$additional_buttons['Change Document'] = 'uploadScannedDocument('.$visit_log_id.')';
					$additional_buttons['Remove Document'] = 'removeScannedDocument('.$visit_log_id.')';
				} else {
					$additional_buttons['Upload Scanned Document'] = 'uploadScannedDocument('.$visit_log_id.')';
				}
			}
		}

		/*
		$additional_buttons['Patient Signature'] = "capture_signature({$visit_log_id})";		
		$additional_buttons['Clinician Signature'] = "capture_clinician_signature({$visit_log_id})";
		
		*/
		$this->tpl->assign('additional_buttons', $additional_buttons );

		$this->getPatientInfo($visit_log_id);
		$this->tpl->assign("visit_log_id", $visit_log_id);
		// $this->tpl->assign("patient", $patient);
		$this->tpl->assign("window", $window);
		$this->tpl->assign_include("dynamic_form", "task/documents/irvi");
		$this->setfbase($visit_log_id, $action);

		$this->tpl->view("parts/ibase", $this->lang->language);
	}

	function capture_pt_signature($visit_log_id) {
		$visitlog = $this->visitlogmdl->getById($visit_log_id);
		$patient = $this->patientmdl->getById($visitlog->patient_id); 
		// $agency = $this->agencymdl->getByAgencyId($patient->agency_id);
		
		$irvi = $this->irvimdl->get($visit_log_id);   
		// if($visitlog->signature != "") {
		// 	$irvi->pt_signature = $visitlog->signature;
		// }

		//echo FCPATH;
		$rules = array (
			'signature' 	=> 'required'
		);		
		$this->validation->set_rules($rules);
		$this->tpl->assign("visit_log_id", $visit_log_id);	
		
		if ($this->validation->run() == FALSE) {
			// get the image name based on the visit_log_id
			// $visit_log_array = $this->visitlogmdl->getById($visit_log_id);
			
			if (isset($visitlog->signature)) {
				$this->tpl->assign("signature", $visitlog->signature);	
			}
			$this->tpl->assign_include("dynamic_tpl", "task/capture_pt_signature");
			$this->tpl->view("task/ibase", $this->lang->language);	
		} else {
			if (!is_null($this->input->post('signature'))) {
				if (empty($irvi)) {
					$this->irvimdl->visit_log_id = $visit_log_id;
					$this->irvimdl->insert($visit_log_id);
				}

				$signature = $this->input->post('signature');
				$temp_array = explode(",", $signature);				
				$encoded_image = $temp_array[1];
				$decoded_image = base64_decode($encoded_image);
				$signature_file_name = "pt_signature_" . $visit_log_id . ".jpg";
				$upload_path = str_replace("\\","/", FCPATH) . "upload/signatures/";
				
				file_put_contents($upload_path . $signature_file_name, $decoded_image);
				$this->visitlogmdl->updateSignature($visit_log_id, $signature_file_name);
				// $this->irvimdl->updateFlex($visit_log_id, 'pt_signature', $signature_file_name);
				// $this->irvimdl->updateFlex($visit_log_id, 'pt_signed_date', standard_date(now(), 'MYSQL'));

				$config =& get_config();

				echo 'Signature has been captured and saved successfully.';
				echo '<script>
					setTimeout(function(){
						parent.location.href=\''.$config["index_url"].'task/irvi/index/'.$visit_log_id.'?r='.time().'#anchor_pt_signature\';
					}, 2000);
				</script>';
			}
		}	
	}	

	function capture_clinician_signature($visit_log_id) {
		$visitlog = $this->visitlogmdl->getById($visit_log_id);
		$patient = $this->patientmdl->getById($visitlog->patient_id); 
		// $agency = $this->agencymdl->getByAgencyId($patient->agency_id);

		$irvi = $this->irvimdl->get($visit_log_id);   
		// if($visitlog->signature != "") {
		// 	$irvi->pt_signature = $visitlog->signature;
		// }

		$rules = array (
			'signature' 	=> 'required'
		);		
		$this->validation->set_rules($rules);
		$this->tpl->assign("visit_log_id", $visit_log_id);	
		
		if ($this->validation->run() == FALSE) {
			// get the image name based on the visit_log_id
			// $visit_log_array = $this->visitlogmdl->getById($visit_log_id);
			//echo "<pre>"; print_r($visit_log_array); echo "</pre>";
			if (isset($irvi->clinician_signature)) {
				$this->tpl->assign("signature", $irvi->clinician_signature);	
			}
			$this->tpl->assign_include("dynamic_tpl", "task/capture_clinician_signature");
			$this->tpl->view("task/ibase", $this->lang->language);	
		} else {
			if (!is_null($this->input->post('signature'))) {
				if (empty($irvi)) {
					$this->irvimdl->visit_log_id = $visit_log_id;
					$this->irvimdl->insert($visit_log_id);
				}
				
				$signature = $this->input->post('signature');
				$temp_array = explode(",", $signature);				
				$encoded_image = $temp_array[1];
				$decoded_image = base64_decode($encoded_image);
				$signature_file_name = "clinician_signature_" . $visit_log_id . ".jpg";
				$upload_path = str_replace("\\","/", FCPATH) . "upload/signatures/";
				
				file_put_contents($upload_path . $signature_file_name, $decoded_image);
				$this->irvimdl->updateFlex($visit_log_id, 'clinician_signature', $signature_file_name);
				$this->irvimdl->updateFlex($visit_log_id, 'clinician_signed_date', standard_date(now(), 'MYSQL'));

				$config =& get_config();

				echo 'Signature has been captured and saved successfully.';
				echo '<script>
					setTimeout(function(){
						parent.location.href=\''.$config["index_url"].'task/irvi/index/'.$visit_log_id.'?r='.time().'#anchor_clinician_signature\';
					}, 2000);
				</script>';
				
			}
		}	
	}	

	
	function validation_visit($visit_log_id){
		$visitlog = $this->visitlogmdl->getById($visit_log_id);
		$patient = $this->patientmdl->getById($visitlog->patient_id); 
		$agency = $this->agencymdl->getByAgencyId($patient->agency_id);
		$visit_user = $this->usagymdl->getByUsAgyId($visitlog->visit_user_id);
		
		if ($visitlog->visit_discipline_id) {
			$user_discipline = $this->disciplinemdl->getById($visitlog->visit_discipline_id);
			$visit_user = (object) array_merge((array)$visit_user, (array)$user_discipline );
		}

		$enable_visit = false;
		// if (isset($agency->F3625_req_visit) AND $agency->F3625_req_visit == 1) {
			// always enabled visit now
			$enable_visit = true;
		// }

		$rules = array();
		$fields = array();

		$rules['visit_date_time'] = 'required';
		$fields['visit_date_time'] = 'Order Date';

		$rules['irvi_notes'] = 'required';
		$fields['irvi_notes'] = 'Notes';



		// Validation for irvi
    	// $rules['signature'] = 'required';
		// $fields['signature'] = 'Patient Signature of Client Assessment visit';

		$rules['clinician_signature'] = 'required';
		$fields['clinician_signature'] = 'Clinician Signature of Client Assessment Visit';

		$rules['visit_duration'] = 'required|callback_checkvisitduration';
		$fields['visit_duration'] = 'Visit Duration';
		
		$irvi = $this->irvimdl->get($visit_log_id);
		if (empty($irvi)) {
			$irvi = $this->irvimdl->getEmpty();
			$irvi->visit_log_id = $visit_log_id;
		}
		// if($visitlog->signature != "") {
		// 	$irvi->pt_signature = $visitlog->signature;
		// }
		
		if (!$irvi->upload_document_name ) {
			$this->validation->set_rules($rules);
			$this->validation->set_fields($fields);
		}

		$validation_success = 0;
		$msg = 0;
		if ($this->validation->run() == TRUE) {
			$validation_success = 1;
		} else {
			$msg = $this->validation->get_error_msg();		
		}

		echo json_encode(array('validation_success'=>$validation_success, 'msg'=>$msg));
		exit();
	}
	
	function checkvisitduration($duration){
		if ($duration > 240) {
			$this->validation->set_message('checkvisitduration', "Invalid visit duration field.");
			return FALSE;
		} else {
			return TRUE;
		}
	}

	function pdf($visit_log_id, $output='D') {
    	exit('Print pdf feature not available.');

	}

	function upload_document($visit_log_id){
		$can_upload = false;
		$visitlog = $this->visitlogmdl->getById($visit_log_id);
		$patient = $this->patientmdl->getById($visitlog->patient_id); 

		if ($visitlog->visit_status_id == 1 OR $visitlog->visit_status_id == 2 OR $visitlog->visit_status_id == 5) {
			if ($this->getUserProfileId() == 1 || $this->getUserProfileId() == 3 || $visitlog->visit_user_id == $this->getUsAgyId()) {
				$can_upload = true;
			}
		}

		if (!$can_upload) {
			exit('Can\'t Upload!');
		}

		if ((isset($_FILES['document']) AND $_FILES['document']['error']==0) ) {
			$config =& get_config();

			// Save form 
			$fname = "";

			if (isset($_FILES['document']) AND $_FILES['document']['error']==0) {
				$fname = $patient->last_name."_".$visitlog->visit_date_time.'_'.$visitlog->visit_log_number.'_'.$visitlog->visit_log_id.'_'.mt_rand().'.'.pathinfo($_FILES['document']['name'], PATHINFO_EXTENSION);
				$fname = str_replace(" ","_",$fname);
				$fname = str_replace("%","_",$fname);
				$fname = str_replace("#","",$fname);
				$fname = str_replace("&","",$fname);
				$fname = str_replace(":","-",$fname);
				if (!move_uploaded_file($_FILES['document']['tmp_name'], FCPATH.'/datastore/irvi/'.$fname)) {
					$fname = "";
				}
			}

			// $fname = microtime()."_".$fname;
			if($fname ) {
					$irvi = $this->irvimdl->get($visit_log_id);

					if (empty($irvi)) {
						// $patient = $this->patientmdl->getById($visitlog->patient_id);	
						// $user = $this->usagymdl->getByUsAgyId($visitlog->visit_user_id);
						// $agency = $this->agencymdl->getByAgencyId($patient->agency_id);
						
						$irvi = $this->irvimdl->getEmpty();

						$this->assignPostData($this->irvimdl, $irvi);
				        $this->irvimdl->visit_log_id = $visit_log_id;
				        $this->irvimdl->upload_document_name = $fname;
				        
						$this->irvimdl->insert($visit_log_id);
				    } else {
				    	if ($fname) {
				    		@unlink(FCPATH.'/datastore/irvi/'.$irvi->upload_document_name);
							$this->irvimdl->updateFlex($visit_log_id, 'upload_document_name', $fname);
				    	}
				    	
				    }

					$this->visitlogmdl->updateFlex($visit_log_id, 'visit_status_id', 2);
					$this->visitlogmdl->updateFlex($visit_log_id, 'visited_date', $visitlog->visit_date_time);
				    
					echo "<center>Document has been uploaded.</center><SCRIPT>alert('Document has been uploaded');parent.location.href='".$config["index_url"]."task/irvi/index/".$visit_log_id."';</SCRIPT>";
			}else{
				exit("Document Upload Failed!");
			}
		} else {	
			if (isset($_FILES['document']['error']) AND $_FILES['document']['error'] != 0 ) {
				$error_string = $this->tpl->get_template_vars('error_string');
				$error_string .= "<br>Please select Document";
				$this->tpl->assign("error_string", $error_string);
			}
			$irvi = $this->irvimdl->get($visit_log_id);
			$this->assignObject($irvi);

			$this->tpl->assign_include("dynamic_tpl", "task/documents/upload_irvi_document");

		
			$this->tpl->assign("gov_program", $patient->gov_program);
			$this->tpl->assign("visit_log_id", $visit_log_id);
			$this->tpl->view("parts/ibase", $this->lang->language);

		}
	}

	function pre_remove_document($visit_log_id){
		$can_remove = false;
		$visitlog = $this->visitlogmdl->getById($visit_log_id);
		$patient = $this->patientmdl->getById($visitlog->patient_id); 

		if ($visitlog->visit_status_id == 1 OR $visitlog->visit_status_id == 2 OR $visitlog->visit_status_id == 5) {
			if ($this->getUserProfileId() == 1 || $this->getUserProfileId() == 3 || $visitlog->visit_user_id == $this->getUsAgyId()) {
				$can_remove = true;
			}
		}

		if (!$can_remove) {
			exit('Can\'t Remove document!');
		}

		$irvi = $this->irvimdl->get($visit_log_id);
		$this->assignObject($irvi);
		$this->tpl->assign("visit_log_id", $visit_log_id);
		$this->tpl->assign_include("dynamic_tpl", "task/documents/remove_irvi_document");
		$this->tpl->view("parts/ibase", $this->lang->language);
	}

	function remove_document($visit_log_id, $doc_number){
		$can_remove = false;
		$visitlog = $this->visitlogmdl->getById($visit_log_id);

		if ($visitlog->visit_status_id == 1 OR $visitlog->visit_status_id == 2 OR $visitlog->visit_status_id == 5) {
			if ($this->getUserProfileId() == 1 || $this->getUserProfileId() == 3 || $visitlog->visit_user_id == $this->getUsAgyId()) {
				$can_remove = true;
			}
		}

		if (!$can_remove) {
			exit('Can\'t Remove document!');
		}
		$irvi = $this->irvimdl->get($visit_log_id);
		
		switch ($doc_number) {
			case '1':
				if (isset($irvi->upload_document_name)) {
					@unlink(FCPATH.'/datastore/irvi/'.$irvi->upload_document_name);
					$this->irvimdl->updateFlex($visit_log_id, 'upload_document_name', null);
				}
				break;
			default:
				exit('Document Not found.');
				break;
		}
		
		echo "1";exit();

	}
 }
